{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Iguana LDM"
  },

  "basePath": "/api/v1",
  "schemes": [
    "http"
  ],
  "paths": {
    "/accessToken": {
      "post": {
        "tags": [
          "AccessTokenApi"
        ],
        "summary": "Generate a new access token.",
        "description": "The endpoint to validate users credentials and generate an access token.",
        "operationId": "CreateAccesstoken",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The username.",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password in clear text.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Generated access token.",
            "schema": {
              "$ref": "#/definitions/TokenResult"
            }
          },
          "400": {
            "description": "The request is not as expected"
          }
        }
      }
    },
    "/accessToken/refresh": {
      "post": {
        "tags": [
          "AccessTokenApi"
        ],
        "summary": "Refresh an existing access token.",
        "description": "The endpoint to refresh an access token. The current access token must be provided in the Authentication header. \r\nThe request is succesfull as long as the access token is valid.",
        "operationId": "RefreshAccessToken",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Refreshed access token.",
            "schema": {
              "$ref": "#/definitions/TokenResult"
            }
          },
          "400": {
            "description": "The request is not as expected"
          }
        }
      }
    },
    "/companies/{companyId}": {
      "get": {
        "tags": [
          "CompanyApi"
        ],
        "summary": "Gets company and address information for a specific company id.",
        "description": "Gets company and address information by the company id",
        "operationId": "GetCompanyById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CompanyAndAddressResponse"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/companies": {
      "get": {
        "tags": [
          "CompanyApi"
        ],
        "summary": "Returns a list of all companies or gets one company by name.",
        "description": "Lists all companies if name query is empty otherwise company with specific name",
        "operationId": "SearchForCompany",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The exact name.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompanyResponse"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CompanyApi"
        ],
        "summary": "Creates a new company.",
        "description": "Creates a new company",
        "operationId": "CreateCompany",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "company",
            "in": "body",
            "description": "The company.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyPostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CompanyAndAddressResponse"
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "409": {
            "description": "Request conflics with other resource"
          }
        }
      }
    },
    "/companies/{companyId}/members": {
      "get": {
        "tags": [
          "CompanyMemberApi"
        ],
        "summary": "Gets the users with roles of a company.",
        "description": "Returns a list of users and their roles of a company.",
        "operationId": "GetCompanyMembers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompanyMemberDataResponse"
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      },
      "post": {
        "tags": [
          "CompanyMemberApi"
        ],
        "summary": "Creates a new company membership with a role.",
        "description": "Creates a member with a role for a specific company",
        "operationId": "CreateCompanyMember",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "memberData",
            "in": "body",
            "description": "Membership data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyMemberDataPostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CompanyMemberDataResponse"
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "409": {
            "description": "Request conflics with other resource"
          }
        }
      }
    },
    "/companies/{companyId}/members/{memberId}": {
      "get": {
        "tags": [
          "CompanyMemberApi"
        ],
        "summary": "Gets a specific membership of a company.",
        "description": "Gets a specific membership for a specific company",
        "operationId": "GetCompanyMember",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "Member id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CompanyMemberDataResponse"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/components/{componentId}": {
      "get": {
        "tags": [
          "ComponentApi"
        ],
        "summary": "Gets the component by id.",
        "description": "Components are e.g. device, plant, subplant, etc.",
        "operationId": "GetComponentById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "The component id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ComponentResponse"
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/countries/{countryCode2}": {
      "get": {
        "tags": [
          "CountryApi"
        ],
        "summary": "Gets the specified country by ISO code.",
        "operationId": "GetCountryByCode",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "countryCode2",
            "in": "path",
            "description": "The country code according to ISO3166 APLPHA-2.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountryResponse"
            }
          }
        }
      }
    },
    "/countries": {
      "get": {
        "tags": [
          "CountryApi"
        ],
        "summary": "Gets a list of all countries.",
        "operationId": "GetAllCountries",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CountryResponse"
              }
            }
          }
        }
      }
    },
    "/customermessages/search": {
      "post": {
        "tags": [
          "CustomerMessageApi"
        ],
        "summary": "Gets recursiv customer messages for a portfolio, plant, subplant or device.",
        "description": "This endpoint returns a limited list of customer messages recursive for a portfolio, plant, subplant or single device\r\nin descending order from request property \"from\".\r\n            \r\nTo fetch more items use the property marker of the last returned CustomerMessageResponse object. \r\nThis marker can be passed as reference in the request property \"marker\". Both request properties \"from\" and\r\n\"marker\" can not be passed at the same request, otherwise a 400 bad request will be returned.\r\n            \r\nThe request property \"componentId\" addresses the root component (plant, subplant or device) and all underlying components of the request.\r\nIf \"componentId\" is null or empty, the customer messages of the the complete portfolio (user-dependend) and all underlying components will be returned as a limited list.",
        "operationId": "GetCustomerMessages",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "queryRequest",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerMessageQueryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerMessageResponse"
              }
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "403": {
            "description": "The operation is forbidden"
          }
        }
      }
    },
    "/dashboard/widgets": {
      "get": {
        "tags": [
          "DashboardApi"
        ],
        "summary": "Returns a list of available widget definitions for passed componentId.",
        "description": "Returns a list of widget definitions, that are available for current user. A widget definition does not\r\ncontain data of the widget. Depend on the widget type (e.g. EnergyAndPower or Weather) the client has to\r\nquery further endpoints to collect the necessary data for the widget visualization. If parameter \"componentId\" is set, \r\nwidgets related to this component (e.g. plant, device, subplant, etc.) will be returned, otherwise available \r\nwidgets for all authorized components (Portfolio) will be returned.",
        "operationId": "GetWidgets",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "query",
            "description": "The id of the component. Components are plants, plant-groups, devices and sub-plants.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WidgetResponse"
              }
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/plants/{plantId}/devices/{deviceId}": {
      "get": {
        "tags": [
          "DeviceApi"
        ],
        "summary": "Gets device information for a specific device.",
        "description": "Returns a device by the device id.",
        "operationId": "GetDeviceById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant Id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceResponse"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      },
      "put": {
        "tags": [
          "DeviceApi"
        ],
        "summary": "Updates an existing device",
        "operationId": "UpdateDevice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The device object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "Request conflics with other resource"
          }
        }
      }
    },
    "/plants/{plantId}/devices": {
      "get": {
        "tags": [
          "DeviceApi"
        ],
        "summary": "Gets devices of the plant and its subplants.",
        "description": "Returns a list of devices belongs to a specific plant. Assignments to subplants does not affect the result.",
        "operationId": "GetDevicesForPlant",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query string. Return all devices with part name or serial matching the query string.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceResponse"
              }
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/plants/{plantId}/availabledevices": {
      "get": {
        "tags": [
          "DeviceApi"
        ],
        "summary": "Gets all devices in plant that are assignable to a subplant",
        "description": "Returns a list of devices belongs to a specific plant. The result depends on the assignment to a subplant.\r\nIf a device is assignable to multiple subplants it is returned. If a device is assignable only to one subplant and already assigned, it is not part of the result.",
        "operationId": "GetUnassignedDevicesForPlant",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Optional query string. Return all devices with part of name or serial matching the query string.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceResponse"
              }
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/components/{componentId}/forecast/weather": {
      "get": {
        "tags": [
          "ForecastApi"
        ],
        "summary": "Returns the weather forecast..",
        "description": "Queries weather forecast for the defined component.",
        "operationId": "GetForecast",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "The id of the component. Components are plants, plant-groups, devices and sub-plants.",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTodayUtc",
            "in": "query",
            "description": "The start datetime in utc of the day related to the plants location.",
            "required": true,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Weather forecast response object.",
            "schema": {
              "$ref": "#/definitions/WeatherForecastResponse"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/gridmanagement/{plantId}/widget": {
      "get": {
        "tags": [
          "GridManagementApi"
        ],
        "summary": "Gets the data for GMS Widget.",
        "description": "Gets the data for GMS Widget with data for the last 24 hours.",
        "operationId": "GetGmsWidget",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GridManagementWidgetResponse"
            }
          }
        }
      }
    },
    "/measurements/search": {
      "post": {
        "tags": [
          "MeasurementApi"
        ],
        "summary": "Measurements of plants, devices, sub-plants, etc.",
        "description": "Returns list of measurements. Requested componentIds could by of any component type.",
        "operationId": "QueryMeasurements",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "queryRequest",
            "in": "body",
            "description": "Information about the requested measurements.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MeasurementQueryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of measurements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MeasurementResult"
              }
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "403": {
            "description": "The operation is forbidden"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/measurements/live": {
      "post": {
        "tags": [
          "MeasurementApi"
        ],
        "summary": "Live measurement data of plants, devices, sub-plants, etc.",
        "operationId": "LiveQueryMeasurements",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "pollRequests",
            "in": "body",
            "description": "The request informations used to poll.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LiveDataPollRequestItem"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MeasurementResult"
              }
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "403": {
            "description": "The operation is forbidden"
          }
        }
      }
    },
    "/plants/{plantId}/meters": {
      "get": {
        "tags": [
          "MeterConfigurationApi"
        ],
        "summary": "Get current meter configuration of a plant and possible devices and channels to configure.",
        "description": "Get current meter configuration of a plant and possible devices and channels to configure.",
        "operationId": "GetPlantMeterConfiguration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MeterConfigurationResult"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      },
      "put": {
        "tags": [
          "MeterConfigurationApi"
        ],
        "summary": "Update the current meter configuration of a plant.",
        "description": "Update the current meter configuration of a plant.",
        "operationId": "UpdatePlantMeterConfiguration",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "update",
            "in": "body",
            "description": "The configuration to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MeterConfigurationUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "Request conflics with other resource"
          }
        }
      }
    },
    "/navigation/menuitems": {
      "get": {
        "tags": [
          "NavigationApi"
        ],
        "summary": "Returns the menu items.",
        "description": "Menu item describes an element for feature navigation. If componentId is not set, menu items for \r\nroot navigation item (Portfolio, Plant) will be returned.",
        "operationId": "GetMenuItems",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "query",
            "description": "The id of the component. Components are plants, plant-groups, devices and sub-plants.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Menu items.",
            "schema": {
              "$ref": "#/definitions/MenuItemsResponse"
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/navigation": {
      "get": {
        "tags": [
          "NavigationApi"
        ],
        "summary": "Returns child navigation items of the passed parent component id or root elements if parentId is not set.",
        "description": "Navigation items describes elements for navigating within a plant related to passed parent component id.",
        "operationId": "GetNavigation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "parentId",
            "in": "query",
            "description": "The id of the parent component. Components are plants, plant-groups, devices and sub-plants.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of available navigation items related to the parent component id.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NavigationItem"
              }
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/notifications/{componentId}/configurations": {
      "get": {
        "tags": [
          "NotificationConfigurationsApi"
        ],
        "summary": "Get Configurations for given ComponentId (SubPlant, Plant, PlantGrp etc.) and higher hierarchies.",
        "description": "Get all notification Configurations, which are found for given componentId and all parentComponentIds (for example if component is a\r\nsubPlant, you will get alle notification configurations for the plant and all plantGrps the subPlant is in).\r\nYou need the privileges to view notification configurations for given componentId.",
        "operationId": "GetConfigurationsByComponent",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "The component identifier for which this request is.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationConfigurationItemResponse"
              }
            }
          },
          "400": {
            "description": "The request is not as expected (invalid componentId?)"
          },
          "403": {
            "description": "The operation is forbidden"
          },
          "404": {
            "description": "No Configurations found"
          }
        }
      },
      "post": {
        "tags": [
          "NotificationConfigurationsApi"
        ],
        "summary": "Creates a new notification configuration for the given user on the given componentId.",
        "description": "The Notification will be marked for the given componentId, f.e. plant, plantgrp. The user will be the creator, but all people with\r\nenough privileges on the componentId can see the configuration.",
        "operationId": "InsertConfiguration",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "postRequest",
            "in": "body",
            "description": "The post request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationConfigurationPostRequest"
            }
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "The component identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationConfigurationItemResponse"
            }
          },
          "400": {
            "description": "The request is not as expected (invalid componentId or body request)"
          },
          "403": {
            "description": "The operation is forbidden"
          }
        }
      }
    },
    "/notifications/configurations": {
      "get": {
        "tags": [
          "NotificationConfigurationsApi"
        ],
        "summary": "Get Configurations for logged In Users Portfolio.",
        "description": "Get all notification Configurations, which are found for given userId. This is equal to the users portfolio level.",
        "operationId": "GetConfigurationsInPortfolio",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationConfigurationItemResponse"
              }
            }
          },
          "403": {
            "description": "The operation is forbidden"
          },
          "404": {
            "description": "No Configuration found"
          }
        }
      },
      "post": {
        "tags": [
          "NotificationConfigurationsApi"
        ],
        "summary": "Creates a new notification configuration for the given users portfolio.",
        "description": "The Notification will be marked for the given userId indicating that it is for the users portfolio. The user will be the creator, and all other users\r\ncannot see the configuration.",
        "operationId": "InsertConfiguration",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "postRequest",
            "in": "body",
            "description": "The post request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationConfigurationPostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationConfigurationItemResponse"
            }
          },
          "400": {
            "description": "The request is not as expected (invalid body request)"
          },
          "403": {
            "description": "The operation is forbidden"
          }
        }
      }
    },
    "/notifications/{componentId}/configurations/{configurationId}": {
      "put": {
        "tags": [
          "NotificationConfigurationsApi"
        ],
        "summary": "Updates the given notification configuration.",
        "description": "Updates the given notification configuration (identified by configurationId) to the new values delivered in the body \r\nrequest object. ComponentId and UserId have to be valid and have to have enough privileges to do so.",
        "operationId": "UpdateConfiguration",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "putRequest",
            "in": "body",
            "description": "The put request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationConfigurationPutRequest"
            }
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "The component identifier is optional.",
            "required": true,
            "type": "string"
          },
          {
            "name": "configurationId",
            "in": "path",
            "description": "The configuration identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "The request is not as expected (invalid userId/componentId or invalid configurationId or invalid body request)"
          },
          "403": {
            "description": "The operation is forbidden"
          },
          "404": {
            "description": "Configuration to update not found."
          }
        }
      },
      "delete": {
        "tags": [
          "NotificationConfigurationsApi"
        ],
        "summary": "Deletes given notification configuration.",
        "description": "Delete the given notification configuration (identified by configurationId). UserId and ComponentId have to be valid and have to have enough privileges to do so.",
        "operationId": "DeleteConfiguration",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "The component identifier is optional.",
            "required": true,
            "type": "string"
          },
          {
            "name": "configurationId",
            "in": "path",
            "description": "Identifier for the configuration.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "The request is not as expected (invalid userId/componentId or invalid configurationId or invalid body request)"
          },
          "403": {
            "description": "The operation is forbidden"
          }
        }
      }
    },
    "/notifications/configurations/{configurationId}": {
      "put": {
        "tags": [
          "NotificationConfigurationsApi"
        ],
        "summary": "Updates the given notification configuration.",
        "description": "Updates the given notification configuration (identified by configurationId) to the new values delivered in the body \r\nrequest object. UserId has to be valid and has to have enough privileges to do so.",
        "operationId": "UpdateConfiguration",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "putRequest",
            "in": "body",
            "description": "The put request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationConfigurationPutRequest"
            }
          },
          {
            "name": "configurationId",
            "in": "path",
            "description": "The configuration identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "The request is not as expected (invalid userId or invalid configurationId or invalid body request)"
          },
          "403": {
            "description": "The operation is forbidden"
          },
          "404": {
            "description": "Configuration to update not found."
          }
        }
      },
      "delete": {
        "tags": [
          "NotificationConfigurationsApi"
        ],
        "summary": "Deletes given notification configuration.",
        "description": "Delete the given notification configuration (identified by configurationId). UserId has to be valid and has to have enough privileges to do so.",
        "operationId": "DeleteConfiguration",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "description": "Identifier for the configuration.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "The request is not as expected (invalid userId or invalid configurationId or invalid body request)"
          },
          "403": {
            "description": "The operation is forbidden"
          }
        }
      }
    },
    "/notifications/templates": {
      "get": {
        "tags": [
          "NotificationTemplatesApi"
        ],
        "summary": "Get all notification configuration templates.",
        "description": "Will return all valid templates from which a notification configuration can be created.\r\nContains initial Information to give to the user.\r\nContains custom parameters which can be configured by the user. the TagId defines the text to be viewed,\r\nthe ParameterTemplateId defines which type of parameter it is.",
        "operationId": "GetTemplates",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationConfigurationTemplateResponse"
              }
            }
          },
          "403": {
            "description": "The operation is forbidden"
          },
          "404": {
            "description": "No Notification Templates found"
          }
        }
      }
    },
    "/notifications/templates/{templateId}": {
      "get": {
        "tags": [
          "NotificationTemplatesApi"
        ],
        "summary": "Get a notification configuration template.",
        "description": "Will return the template with given templateId from which a notification configuration can be created.\r\nContains initial Information to give to the user.\r\nContains custom parameters which can be configured by the user. the TagId defines the text to be viewed,\r\nthe ParameterTemplateId defines which type of parameter it is.",
        "operationId": "GetTemplate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationConfigurationTemplateResponse"
            }
          },
          "400": {
            "description": "The request is not as expected (invalid templateId?)"
          },
          "403": {
            "description": "The operation is forbidden"
          },
          "404": {
            "description": "No Notification Template with this Id found"
          }
        }
      }
    },
    "/overview": {
      "get": {
        "tags": [
          "OverviewApi"
        ],
        "operationId": "GetOverview",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "parentId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OverviewPlantItems"
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/overview/plants": {
      "get": {
        "tags": [
          "OverviewApi"
        ],
        "summary": "Returns child overview items (plants or sub plants) of the passed parent component id or root elements if parentId is not set.",
        "description": "Navigation items describes elements for navigating within a plant related to passed parent component id.",
        "operationId": "GetOverview",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "parentId",
            "in": "query",
            "description": "The id of the parent component. Components are plants or plant-groups.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip number of entries form the beginning",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Defines how many elements should be delivered, if null all elements",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of available navigation items related to the parent component id.",
            "schema": {
              "$ref": "#/definitions/OverviewPlantItems"
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/overview/{parentId}/devices": {
      "get": {
        "tags": [
          "OverviewApi"
        ],
        "summary": "Gets and filters the devices of a plant with additional informations",
        "operationId": "GetDiagnosticDevicesForPlant",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "description": "The id of the parent component. Components are plants, plant-groups, devices and sub-plants.",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip number of entries form the beginning",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Defines how many elements should be delivered, if null all elements",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OverviewItemDevice"
              }
            }
          }
        }
      }
    },
    "/parameters/search": {
      "post": {
        "tags": [
          "ParameterApi"
        ],
        "summary": "Gets all or the requested parameters of a plants, a devices, a sub-plants, etc.",
        "description": "Returns list of parameters according to query.",
        "operationId": "QueryParameters",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "queryRequest",
            "in": "body",
            "description": "Information about the requested Parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ParameterQueryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ParameterResult"
              }
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "403": {
            "description": "The operation is forbidden"
          }
        }
      }
    },
    "/parameters/{componentId}": {
      "put": {
        "tags": [
          "ParameterApi"
        ],
        "summary": "Sets the given parameters of the device",
        "description": "Updates all given parameters for a specific component (e.g. plant, device, etc.)",
        "operationId": "UpdateParameters",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "Identifier for the component. (e.g. plant or device)",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameterRequest",
            "in": "body",
            "description": "The parameter request with on or more parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ParameterDataRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "Request conflics with other resource"
          }
        }
      }
    },
    "/plants/{plantId}": {
      "get": {
        "tags": [
          "PlantApi"
        ],
        "summary": "Get plant by plant id.",
        "description": "Returns the plant information for the specific plant id",
        "operationId": "GetByPlantId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PlantResponse"
            }
          },
          "404": {
            "description": "Resource not found or no authorization"
          }
        }
      },
      "put": {
        "tags": [
          "PlantApi"
        ],
        "summary": "Update the plant properties",
        "description": "Update the plant properties.",
        "operationId": "UpdatePlant",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "plant",
            "in": "body",
            "description": "The Plant properties to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlantRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found or no authorization"
          },
          "409": {
            "description": "Request conflics with other resource"
          }
        }
      }
    },
    "/plants": {
      "get": {
        "tags": [
          "PlantApi"
        ],
        "summary": "Get visible plants for current user",
        "description": "Returns the plant information for all accessable plants",
        "operationId": "QueryPlants",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string. Return all plants where at least one device exists with part of name or serial matching the query string.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlantResponse"
              }
            }
          },
          "400": {
            "description": "The request is not as expected"
          }
        }
      },
      "post": {
        "tags": [
          "PlantApi"
        ],
        "summary": "Creates a new plant.",
        "description": "Creates a new plant.",
        "operationId": "CreatePlant",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plant",
            "in": "body",
            "description": "The Plant properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlantRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PlantResponse"
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "409": {
            "description": "Request conflics with other resource"
          }
        }
      }
    },
    "/plantgroups": {
      "get": {
        "tags": [
          "PlantGroupApi"
        ],
        "summary": "Gets the plant groups.",
        "description": "Returns all plant groups where the current user is plant group administrator (owner) or member of the plant group.\r\nAllowed operations see _links property.",
        "operationId": "GetPlantGroups",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlantGroupResponse"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PlantGroupApi"
        ],
        "summary": "Creates a new plant group.",
        "operationId": "CreatePlantGroup",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlantGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PlantGroupResponse"
            }
          }
        }
      }
    },
    "/plantgroups/{plantGroupId}": {
      "get": {
        "tags": [
          "PlantGroupApi"
        ],
        "summary": "Gets the requested plant group.",
        "description": "Allowed operations see _links property.",
        "operationId": "GetPlantGroup",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantGroupId",
            "in": "path",
            "description": "The plant group identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PlantGroupResponse"
            }
          },
          "404": {
            "description": "PlantGroupId not found or no authorization"
          }
        }
      },
      "put": {
        "tags": [
          "PlantGroupApi"
        ],
        "summary": "Updates the specified plant group by identifier.",
        "operationId": "UpdatePlantGroup",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantGroupId",
            "in": "path",
            "description": "The plant group identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlantGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PlantGroupResponse"
            }
          },
          "404": {
            "description": "PlantGroupId not found or no authorization"
          }
        }
      },
      "delete": {
        "tags": [
          "PlantGroupApi"
        ],
        "summary": "Deletes the specified plant group.",
        "operationId": "DeletePlantGroup",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "plantGroupId",
            "in": "path",
            "description": "The plant group identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "PlantGroupId not found or no authorization"
          }
        }
      }
    },
    "/plantgroups/{plantGroupId}/members": {
      "get": {
        "tags": [
          "PlantGroupMemberApi"
        ],
        "summary": "Gets the plant group memberships for a specific plant group.",
        "description": "Returns a list of membership informations for specific plant group.",
        "operationId": "GetPlantGroupMembershipByPlantId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantGroupId",
            "in": "path",
            "description": "The plant group Id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlantGroupMemberDataResponse"
              }
            }
          },
          "404": {
            "description": "Resource not found or no authorization"
          }
        }
      },
      "post": {
        "tags": [
          "PlantGroupMemberApi"
        ],
        "summary": "Creates membership on plant group to user.",
        "description": "Creates a plant group membership for a user with a specific role",
        "operationId": "CreatePlantGroupMembership",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantGroupId",
            "in": "path",
            "description": "The plant id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The membership request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlantGroupMemberDataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PlantGroupMemberDataResponse"
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found or no authorization"
          },
          "409": {
            "description": "Request conflicts with other resource"
          }
        }
      }
    },
    "/plantgroups/{plantGroupId}/members/{memberId}": {
      "get": {
        "tags": [
          "PlantGroupMemberApi"
        ],
        "summary": "Gets the plant group membership for a specific plant group and membership id.",
        "description": "Gets the membership information for specific plant group filtered with a specific membership id",
        "operationId": "GetPlantGroupMembership",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantGroupId",
            "in": "path",
            "description": "The plant group id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "The membership id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PlantGroupMemberDataResponse"
            }
          },
          "404": {
            "description": "Resource not found or no authorization"
          }
        }
      },
      "put": {
        "tags": [
          "PlantGroupMemberApi"
        ],
        "summary": "Updates an exiting plant group membership for user.",
        "description": "Memberships can be updated either if changing the userId or the roleId",
        "operationId": "UpdatePlantGroupMembership",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "plantGroupId",
            "in": "path",
            "description": "The plant group id",
            "required": true,
            "type": "string"
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "The membership id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The data to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlantGroupMemberDataRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found or no authorization"
          },
          "409": {
            "description": "Request conflicts with other resource"
          }
        }
      },
      "delete": {
        "tags": [
          "PlantGroupMemberApi"
        ],
        "summary": "Deletes a plant group membership.",
        "description": "Deletes a plant group membership of a specific plant group for a specific membership id",
        "operationId": "DeletePlantGroupMembership",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "plantGroupId",
            "in": "path",
            "description": "The plant group id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "The membership id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Resource not found or no authorization"
          }
        }
      }
    },
    "/plantgroups/{plantGroupId}/plants": {
      "get": {
        "tags": [
          "PlantGroupPlantApi"
        ],
        "summary": "Returns the plants of the specified plant group.",
        "operationId": "GetPlantsOfPlantGroup",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantGroupId",
            "in": "path",
            "description": "The plant group identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlantResponse"
              }
            }
          },
          "404": {
            "description": "PlantGroupId not found or no authorization"
          }
        }
      }
    },
    "/plantgroups/{plantGroupId}/plants/{plantId}": {
      "post": {
        "tags": [
          "PlantGroupPlantApi"
        ],
        "summary": "Adds the the specified plant to plant group.",
        "operationId": "AddPlantToPlantGroup",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "plantGroupId",
            "in": "path",
            "description": "The plant group identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "PlantGroupId or plantId not found or no authorization"
          }
        }
      },
      "delete": {
        "tags": [
          "PlantGroupPlantApi"
        ],
        "summary": "Removes the specified plant from plant group.",
        "operationId": "RemovePlantFromPlantGroup",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "plantGroupId",
            "in": "path",
            "description": "The plant group identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "PlantGroupId or plantId not found or no authorization"
          }
        }
      }
    },
    "/plants/{plantId}/members": {
      "get": {
        "tags": [
          "PlantMemberApi"
        ],
        "summary": "Gets the plant memberships for a specific plant.",
        "description": "Returns a list of membership informations for specific plant",
        "operationId": "GetPlantMembershipByPlantId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant Id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlantMemberDataResponse"
              }
            }
          },
          "404": {
            "description": "Resource not found or no authorization"
          }
        }
      },
      "post": {
        "tags": [
          "PlantMemberApi"
        ],
        "summary": "Creates membership on plant to user.",
        "description": "Creates a plant membership for a user with a specific role",
        "operationId": "CreatePlantMembership",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The membership request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlantMemberDataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PlantMemberDataResponse"
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found or no authorization"
          },
          "409": {
            "description": "Request conflicts with other resource"
          }
        }
      }
    },
    "/plants/{plantId}/members/{memberId}": {
      "get": {
        "tags": [
          "PlantMemberApi"
        ],
        "summary": "Gets the plant membership for a specific plant and membership id.",
        "description": "Gets the membership information for specific plant filtered with a specific membership id",
        "operationId": "GetPlantMembership",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "The membership id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PlantMemberDataResponse"
            }
          },
          "404": {
            "description": "Resource not found or no authorization"
          }
        }
      },
      "put": {
        "tags": [
          "PlantMemberApi"
        ],
        "summary": "Updates an exiting plant membership for user.",
        "description": "Memberships can be updated either if changing the userId or the roleId",
        "operationId": "UpdatePlantMembership",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant id",
            "required": true,
            "type": "string"
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "The membership id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The data to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlantMemberDataRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found or no authorization"
          },
          "409": {
            "description": "Request conflicts with other resource"
          }
        }
      },
      "delete": {
        "tags": [
          "PlantMemberApi"
        ],
        "summary": "Deletes a plant membership.",
        "description": "Deletes a plant membership of a specific plant for a specific membership id",
        "operationId": "DeleteMembership",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "The membership id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Resource not found or no authorization"
          }
        }
      }
    },
    "/preregistereddevices": {
      "get": {
        "tags": [
          "PreregisteredDevices"
        ],
        "summary": "Query preregistered device via PIC/RID",
        "description": "Query preregistered device via Product identification Code and Registration Identifier.",
        "operationId": "GetDeviceByPICRID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "request.productIdentificationCode",
            "in": "query",
            "description": "Gets or sets the Product Identification Code (PIC)",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.registrationIdentifier",
            "in": "query",
            "description": "Gets or sets the Registration Identifier (RID)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PreregisteredDeviceResponse"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/preregistereddevices/{plantId}": {
      "post": {
        "tags": [
          "PreregisteredDevices"
        ],
        "summary": "Add preregistered device to plant.",
        "description": "Add preregistered device to plant. If the device is already added, the request will fail.",
        "operationId": "AddDeviceToPlant",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plantId.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "request",
            "in": "body",
            "description": "Request with PIC and RID",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PreRegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceResponse"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "RoleApi"
        ],
        "summary": "Get all roles",
        "description": "The ids of the roles are used in plant and company membership api. The roles contain different permissions that are not visible through this interface.",
        "operationId": "GetAvailableRoles",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RoleResponse"
              }
            }
          }
        }
      }
    },
    "/roles/{id}": {
      "get": {
        "tags": [
          "RoleApi"
        ],
        "summary": "Get a single role by id",
        "description": "Gets a single role by id",
        "operationId": "GetRoleById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The role id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleResponse"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/plants/{plantId}/subplants/{subplantId}/devices/{deviceId}": {
      "post": {
        "tags": [
          "SubPlantDeviceApi"
        ],
        "summary": "Add device to subplant",
        "description": "Adds device to subplant. If a device can only be assigned to one subplant the request fails\r\nif the device is already assigned.",
        "operationId": "AddDeviceToSubPlant",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The id of the plant",
            "required": true,
            "type": "string"
          },
          {
            "name": "subplantId",
            "in": "path",
            "description": "The id of the subplant",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "The id of the device to add",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "Request conflics with other resource"
          }
        }
      },
      "delete": {
        "tags": [
          "SubPlantDeviceApi"
        ],
        "summary": "Remove device from subplant",
        "description": "Removes device from subplant. If the device does not exist the request fails.",
        "operationId": "RemoveDeviceFromSubPlant",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The id of the plant",
            "required": true,
            "type": "string"
          },
          {
            "name": "subplantId",
            "in": "path",
            "description": "The id of the subplant",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "The id of the device to add",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/plants/{plantId}/subplants/{subplantId}/devices": {
      "get": {
        "tags": [
          "SubPlantDeviceApi"
        ],
        "summary": "Gets all devices assigned to subplant",
        "description": "Gets all devices assigned to subplant",
        "operationId": "GetSubPlantDevices",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The id of the plant",
            "required": true,
            "type": "string"
          },
          {
            "name": "subplantId",
            "in": "path",
            "description": "The id of the subplant",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Query string. Return all subplants where at least one device exists with part of name or serial matching the query string.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceResponse"
              }
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/plants/{plantId}/subplants": {
      "get": {
        "tags": [
          "SubPlantsApi"
        ],
        "summary": "Gets a list of sub plant for a specific plant.",
        "description": "Returns a list of all sub plants for the requested plant",
        "operationId": "GetSubPlantsForPlant",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Query string. Return all subplants where at least one device exists with part of name or serial matching the query string.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubPlantResponse"
              }
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      },
      "post": {
        "tags": [
          "SubPlantsApi"
        ],
        "summary": "Create a sub plant for a specific plant",
        "operationId": "CreateSubPlant",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant Id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "New subplant to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubPlantRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubPlantResponse"
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "Request conflics with other resource"
          }
        }
      }
    },
    "/plants/{plantId}/subplants/{subplantId}": {
      "get": {
        "tags": [
          "SubPlantsApi"
        ],
        "summary": "Gets the sub plant information for a specific sub plant id in a specific plant",
        "operationId": "GetSubPlantById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subplantId",
            "in": "path",
            "description": "The sub plant Id (= subplantId of the sub plant) .",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubPlantResponse"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      },
      "put": {
        "tags": [
          "SubPlantsApi"
        ],
        "summary": "Updates the name of a sub plant",
        "operationId": "UpdateSubPlant",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subplantId",
            "in": "path",
            "description": "The Sub plant Id (= subplantId of the sub plant) for the requested update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The request to update the subplant.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubPlantRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "Request conflics with other resource"
          }
        }
      },
      "delete": {
        "tags": [
          "SubPlantsApi"
        ],
        "summary": "Deletes a sub plant in a specific plant",
        "description": "A subplant ca be deleted even if devices are assigned. The devices are moved back to the plant.",
        "operationId": "DeleteSubPlant",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "description": "The plant id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subplantId",
            "in": "path",
            "description": "The subplant Id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/termsofusedocs": {
      "get": {
        "tags": [
          "TermsOfUse"
        ],
        "summary": "Gets the terms of use docs.",
        "operationId": "GetTermsOfUseDocs",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "cultureName",
            "in": "query",
            "description": "The culture name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "termsOfUseTypes",
            "in": "query",
            "description": "The terms of use document types comma-separated list, e.g. TermsOfUse, DataPrivacy, ProfessionalPackage.",
            "required": false,
            "type": "string"
          },
          {
            "name": "onlyNewest",
            "in": "query",
            "description": "If only newest doc releases should be returned, true by default.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TermsOfUseDocResponse"
              }
            }
          },
          "400": {
            "description": "The request is not as expected"
          }
        }
      }
    },
    "/termsofusedocs/{termsOfUseDocId}": {
      "get": {
        "tags": [
          "TermsOfUse"
        ],
        "summary": "Gets the terms of use content document.",
        "operationId": "GetTermsOfUseDocById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "termsOfUseDocId",
            "in": "path",
            "description": "The terms of use document id.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TermsOfUseDocContentResponse"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/termsofusedocs/{termsOfUseDocId}/confirmations": {
      "post": {
        "tags": [
          "TermsOfUse"
        ],
        "summary": "Confirms terms of use for specified user and document id.",
        "operationId": "Confirm",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "termsOfUseDocId",
            "in": "path",
            "description": "The terms of use document id.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConfirmationResponse"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/useractivationtoken": {
      "put": {
        "tags": [
          "UserActivationTokenApi"
        ],
        "summary": "Activate user for the specific token.",
        "description": "The user gets his activation token (e.g. via email) after registration. After that he can activate his user account with this specific token.",
        "operationId": "ConfirmActivationToken",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Unique activation token for the user.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "UserApi"
        ],
        "summary": "Gets the user by id.",
        "description": "Gets the user by his id.",
        "operationId": "GetUserById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserAccountResponse"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      },
      "put": {
        "tags": [
          "UserApi"
        ],
        "summary": "Updates the User.",
        "description": "Updates the user properties.",
        "operationId": "UpdateUser",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "item",
            "in": "body",
            "description": "New properties for user.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "Request conflics with other resource"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "UserApi"
        ],
        "summary": "Gets the user by identifier.",
        "description": "Gets the user by his user identifier/email address.",
        "operationId": "GetUserByIdentifier",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "query",
            "description": "The identifier/email of the requested user.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserInfoResponse"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      },
      "post": {
        "tags": [
          "UserApi"
        ],
        "summary": "Creates a new user.",
        "description": "Creates a new user.",
        "operationId": "CreateUser",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "The user creation request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          "400": {
            "description": "The request is not as expected"
          }
        }
      }
    },
    "/userpasswordreset": {
      "put": {
        "tags": [
          "UserPasswordResetApi"
        ],
        "summary": "Changes the password with reset token.",
        "description": "Changes the password with reset token that has been send via email.",
        "operationId": "ConfirmPasswordReset",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserPasswordResetConfirmRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "The request is not as expected"
          },
          "404": {
            "description": "The token does not exist or is expired"
          }
        }
      },
      "post": {
        "tags": [
          "UserPasswordResetApi"
        ],
        "summary": "Requests password reset token.",
        "description": "Requests password reset token and sends a link with the token via email. If the email does not exist the method succeeds, too.",
        "operationId": "CreatePasswordResetEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserPasswordResetRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "The request is not as expected"
          }
        }
      }
    },
    "/devicemanagement/protocols": {
      "get": {
        "tags": [
          "DeviceManagementApi"
        ],
        "summary": "Enumerates the fieldbus protocols avialable on the system.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "List of fieldbus protocols available the system.",
            "schema": {
              "$ref": "#/definitions/ProtocolList"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "deprecated": false
      }
    },
    "/devicemanagement/devices": {
      "post": {
        "tags": [
          "DeviceManagementApi"
        ],
        "summary": "Adds the specified devices to the plant.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "devices",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceConnectionDescriptorList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "deprecated": false
      }
    },
    "/devicemanagement/devices/{protocolId}/discovered": {
      "get": {
        "tags": [
          "DeviceManagementApi"
        ],
        "parameters": [
          {
            "name": "protocolId",
            "in": "path",
            "type": "string",
            "description": "Protocol id.",
            "required": true
          }
        ],
        "summary": "Enumerates the discovered devices of a specific protocol detected by the different device drivers.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "device list",
            "schema": {
              "$ref": "#/definitions/DeviceInfoList"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "deprecated": false
      }
    },
    "/devicemanagement/devices/discovered": {
      "get": {
        "tags": [
          "DeviceManagementApi"
        ],
        "summary": "Enumerates the discovered devices detected by the different device drivers.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "device list",
            "schema": {
              "$ref": "#/definitions/DeviceInfoList"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "deprecated": false
      }
    },
    "/devicemanagement/devices/discovered/{deviceInfoId}/login": {
      "put": {
        "tags": [
          "DeviceManagementApi"
        ],
        "summary": "Sets the login credentials to a specific device before adding it to the plant.",
        "consumes": [],
        "parameters": [
          {
            "name": "deviceInfoId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "the device id."
          },
          {
            "name": "credentials",
            "in": "body",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "the login credentials. The format of the credentials depends on the protocol of the device. For Data2+ the passwort must be supplied as a string, e.g. \"1111\"."
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Succeeded"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "deprecated": false
      }
    },
    "/devicemanagement/devices/discovered/{deviceInfoId}/parameters": {
      "put": {
        "tags": [
          "DeviceManagementApi"
        ],
        "summary": "Sets the parameters of a specific device before adding it to the plant.",
        "consumes": [],
        "parameters": [
          {
            "name": "deviceInfoId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceManagementApi_DeviceParameters"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Succeeded"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "deprecated": false
      }
    },
    "/devicemanagement/protocols/{protocolId}": {
      "put": {
        "tags": [
          "DeviceManagementApi"
        ],
        "summary": "sets default settings for the protocol",
        "parameters": [
          {
            "name": "protocolId",
            "in": "path",
            "type": "string",
            "description": "Protocol id.",
            "required": true
          },
          {
            "name": "protocolParameters",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProtocolParameters"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Succeeded"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "deprecated": false
      }
    },
    "/mapping/mappings/{mappingId}": {
      "get": {
        "tags": [
          "MappingApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "mappingId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Mapping properties.",
            "schema": {
              "$ref": "#/definitions/Mapping_Mapping"
            }
          }
        }
      },
      "put": {
        "tags": [
          "MappingApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "mappingId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "settings",
            "in": "body",
            "description": "Mapping properties.",
            "schema": {
              "$ref": "#/definitions/Mapping_Mapping"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded"
          }
        }
      }
    },
    "/gridmanagement/controlMode": {
      "get": {
        "tags": [
          "GridManagementApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Control mode",
            "schema": {
              "$ref": "#/definitions/GridManagement_ControlMode"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "GridManagementApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "mode",
            "in": "body",
            "description": "Control mode",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GridManagement_ControlMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded"
          }
        },
        "deprecated": false
      }
    },
    "/gridmanagement/types": {
      "get": {
        "tags": [
          "GridManagementApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "List of control types.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GridManagement_Type"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/gridmanagement/types/{typeId}": {
      "get": {
        "tags": [
          "GridManagementApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "typeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Control type properties",
            "schema": {
              "$ref": "#/definitions/GridManagement_Type"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "GridManagementApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "typeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mode",
            "in": "body",
            "description": "Control type properties",
            "schema": {
              "$ref": "#/definitions/GridManagement_Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded"
          }
        },
        "deprecated": false
      }
    },
    "/gridmanagement/types/{typeId}/selectionMode": {
      "get": {
        "tags": [
          "GridManagementApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "typeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Source selection mode",
            "schema": {
              "$ref": "#/definitions/GridManagement_SelectionMode"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "GridManagementApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "typeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mode",
            "in": "body",
            "description": "Source selection mode",
            "schema": {
              "$ref": "#/definitions/GridManagement_SelectionMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded"
          }
        },
        "deprecated": false
      }
    },
    "/gridmanagement/types/{typeId}/primarySource": {
      "get": {
        "tags": [
          "GridManagementApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "typeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Primary source id",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "GridManagementApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "typeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mode",
            "in": "body",
            "description": "Primary source id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded"
          }
        },
        "deprecated": false
      }
    },
    "/gridmanagement/types/{typeId}/sources": {
      "get": {
        "tags": [
          "GridManagementApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "typeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of sources.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GridManagement_SourceProperties"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/gridmanagement/types/{typeId}/sources/{sourceId}": {
      "get": {
        "tags": [
          "GridManagementApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "typeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of sources.",
            "schema": {
              "$ref": "#/definitions/GridManagement_SourceProperties"
            }
          }
        }
      },
      "put": {
        "tags": [
          "GridManagementApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "typeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "settings",
            "in": "body",
            "description": "Source properties.",
            "schema": {
              "$ref": "#/definitions/GridManagement_SourceProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded"
          }
        }
      }
    },
    "/gridmanagement/types/{typeId}/rampingSettings": {
      "get": {
        "tags": [
          "GridManagementApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "typeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ramping Settings",
            "schema": {
              "$ref": "#/definitions/GridManagement_RampingSettings"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "GridManagementApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "typeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "settings",
            "in": "body",
            "description": "Ramping Settings",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GridManagement_RampingSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded"
          }
        },
        "deprecated": false
      }
    },
    "/gridmanagement/plantSettings": {
      "get": {
        "tags": [
          "GridManagementApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Plant Settings",
            "schema": {
              "$ref": "#/definitions/GridManagement_PlantSettings"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "GridManagementApi"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "settings",
            "in": "body",
            "description": "Plant Settings",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GridManagement_PlantSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded"
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "TokenResult": {
      "description": "Response of a token request",
      "required": [
        "accessToken",
        "expireDateTime"
      ],
      "type": "object",
      "properties": {
        "accessToken": {
          "description": "The generated authentication token.",
          "type": "string"
        },
        "expireDateTime": {
          "format": "date-time",
          "description": "The timestamp of token expiration in Utc time.",
          "type": "string"
        }
      }
    },
    "CompanyAndAddressResponse": {
      "description": "The company and address response.",
      "required": [
        "countryName",
        "city",
        "companyId",
        "name"
      ],
      "type": "object",
      "properties": {
        "countryName": {
          "description": "Gets or sets the country name in format ISO 3166 ALPHA-2.",
          "type": "string"
        },
        "city": {
          "description": "Gets or sets the city.",
          "type": "string"
        },
        "zipCode": {
          "description": "Gets or sets the zip code.",
          "type": "string"
        },
        "street": {
          "description": "Gets or sets the street.",
          "type": "string"
        },
        "streetNo": {
          "description": "Gets or sets the street no.",
          "type": "string"
        },
        "postOfficeBox": {
          "description": "Gets or sets the post office box.",
          "type": "string"
        },
        "taxIdNumber": {
          "description": "Gets or sets the tax id number.",
          "type": "string"
        },
        "businessPartnerId": {
          "description": "Gets or sets the business partner id.",
          "type": "string"
        },
        "weblink": {
          "description": "Gets or sets the weblink.",
          "type": "string"
        },
        "email": {
          "description": "Gets or sets the email.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "Gets or sets the phone number.",
          "type": "string"
        },
        "faxNumber": {
          "description": "Gets or sets the fax number.",
          "type": "string"
        },
        "description": {
          "description": "Gets or sets the company description.",
          "type": "string"
        },
        "companyId": {
          "format": "int64",
          "description": "Unique company id.",
          "type": "integer"
        },
        "name": {
          "description": "Name of the company.",
          "type": "string"
        }
      }
    },
    "CompanyResponse": {
      "description": "The company response.",
      "required": [
        "companyId",
        "name"
      ],
      "type": "object",
      "properties": {
        "companyId": {
          "format": "int64",
          "description": "Unique company id.",
          "type": "integer"
        },
        "name": {
          "description": "Name of the company.",
          "type": "string"
        }
      }
    },
    "CompanyPostRequest": {
      "required": [
        "name",
        "countryName",
        "city"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the comapny.",
          "type": "string"
        },
        "countryName": {
          "description": "Country where the company is located in format ISO 3166 ALPHA-2.",
          "type": "string"
        },
        "city": {
          "description": "City where the company is located.",
          "type": "string"
        },
        "zipCode": {
          "description": "Zip code of the city where the company is located.",
          "type": "string"
        },
        "street": {
          "description": "Street where the company is located.",
          "type": "string"
        },
        "streetNo": {
          "description": "Street number of the company.",
          "type": "string"
        },
        "postOfficeBox": {
          "description": "Post office box of the company.",
          "type": "string"
        },
        "taxIdNumber": {
          "description": "Tax id number of the company.",
          "type": "string"
        },
        "businessPartnerId": {
          "description": "Business partner id of the company.",
          "type": "string"
        },
        "weblink": {
          "description": "Weblink of the company.",
          "type": "string"
        },
        "email": {
          "description": "Contact email of the company.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "Phone number of the company.",
          "type": "string"
        },
        "faxNumber": {
          "description": "Fax number of the company.",
          "type": "string"
        },
        "description": {
          "description": "Additonal description of the company.",
          "type": "string"
        }
      }
    },
    "CompanyMemberDataResponse": {
      "required": [
        "memberId",
        "userId",
        "roleId"
      ],
      "type": "object",
      "properties": {
        "memberId": {
          "format": "int64",
          "description": "The membership id",
          "type": "integer"
        },
        "userId": {
          "format": "int64",
          "description": "The user id",
          "type": "integer"
        },
        "roleId": {
          "format": "int64",
          "description": "The role id",
          "type": "integer"
        }
      }
    },
    "CompanyMemberDataPostRequest": {
      "required": [
        "userId",
        "roleId"
      ],
      "type": "object",
      "properties": {
        "userId": {
          "format": "int64",
          "description": "The user id",
          "type": "integer"
        },
        "roleId": {
          "format": "int64",
          "description": "The role id",
          "type": "integer"
        }
      }
    },
    "ComponentResponse": {
      "description": "Component response object. Component is e.g. a device, plant, subplant, etc.",
      "required": [
        "componentId",
        "name"
      ],
      "type": "object",
      "properties": {
        "componentId": {
          "description": "Unique identifier of the component.",
          "type": "string"
        },
        "name": {
          "description": "Name of the component.",
          "type": "string"
        },
        "componentTags": {
          "description": "Defines the tags of the component, e.g. Pv, Battery, Generic, EnergyAndPowerOut, EnergyAndPowerInOut.",
          "type": "array",
          "items": {
            "enum": [
              "Pv",
              "Battery",
              "Generic",
              "EnergyAndPowerOut",
              "EnergyAndPowerInOut"
            ],
            "type": "string"
          }
        }
      }
    },
    "CountryResponse": {
      "required": [
        "countryCode2",
        "countryCode3",
        "currencyCode3"
      ],
      "type": "object",
      "properties": {
        "countryCode2": {
          "description": "Gets the country code according to ISO3166 APLPHA-2.",
          "type": "string"
        },
        "countryCode3": {
          "description": "Gets the country code according to ISO3166 APLPHA-3.",
          "type": "string"
        },
        "currencyCode3": {
          "description": "Gets the ISO currency code according to ISO 4217.",
          "type": "string"
        }
      }
    },
    "CustomerMessageQueryRequest": {
      "description": "",
      "type": "object",
      "properties": {
        "componentId": {
          "description": "The component id (e.g. deviceId, plantId, subPlantId) OR null for complete portfolio of the user",
          "type": "string"
        },
        "from": {
          "format": "date-time",
          "description": "The from date time in utc. Messages will be returned in descending date order from this date time. If from is set, marker has not to be transfered.",
          "type": "string"
        },
        "marker": {
          "description": "The marker of the message, where the fetching has to be proceed. If marker is set, from has not to be transfered.",
          "type": "string"
        }
      }
    },
    "CustomerMessageResponse": {
      "description": "The customer message response object.",
      "required": [
        "marker",
        "timestamp",
        "deviceName",
        "deviceSerialnumber",
        "deviceId",
        "messageId",
        "messageTag",
        "traceLevel",
        "eventTypeExtension"
      ],
      "type": "object",
      "properties": {
        "marker": {
          "description": "Gets the unique marker of the message. This marker can be used to determine the starting position of the search.",
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Gets or sets the timestamp.",
          "type": "string"
        },
        "deviceName": {
          "description": "Gets the device name.",
          "type": "string"
        },
        "deviceSerialnumber": {
          "description": "Gets the serial number of the device.",
          "type": "string"
        },
        "deviceId": {
          "description": "Gets or sets the device id.",
          "type": "string"
        },
        "plantId": {
          "description": "Gets the plant id. Do not have to be displayed when requested component is a plant.",
          "type": "string"
        },
        "plantName": {
          "description": "Gets the plant name. Do not have to be displayed when requested component is a plant.",
          "type": "string"
        },
        "messageId": {
          "format": "int32",
          "description": "Gets the message id.",
          "type": "integer"
        },
        "messageTag": {
          "format": "int32",
          "description": "Gets the message tag. Represents the resource id for the message text.",
          "type": "integer"
        },
        "traceLevel": {
          "description": "Gets the trace level.",
          "enum": [
            "None",
            "Info",
            "Warn",
            "Error"
          ],
          "type": "string"
        },
        "eventTypeExtension": {
          "description": "Gets the event type extension, e.g. none, incomming, outgoing.",
          "enum": [
            "None",
            "Incoming",
            "Outgoing"
          ],
          "type": "string"
        },
        "messageGroupTag": {
          "format": "int32",
          "description": "Gets the message group tag. Has to be translated by the resources for the message groups.",
          "type": "integer"
        },
        "arguments": {
          "description": "Gets the arguments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArgumentResponse"
          }
        }
      }
    },
    "ArgumentResponse": {
      "description": "The argument response object.",
      "required": [
        "position",
        "value",
        "valueType"
      ],
      "type": "object",
      "properties": {
        "position": {
          "format": "int32",
          "description": "The argument position in the resource text.",
          "type": "integer"
        },
        "value": {
          "description": "The argument value.",
          "type": "string"
        },
        "valueType": {
          "description": "The type of the value, e.g. string, int, double, timestamp.",
          "enum": [
            "String",
            "Double",
            "Integer",
            "Timestamp",
            "TagId"
          ],
          "type": "string"
        }
      }
    },
    "WidgetResponse": {
      "description": "The widget response object.",
      "required": [
        "widgetType"
      ],
      "type": "object",
      "properties": {
        "widgetType": {
          "description": "Type of the widget element.",
          "enum": [
            "EnergyAndPower",
            "Weather",
            "PerformanceRatio",
            "ActivePower"
          ],
          "type": "string"
        }
      }
    },
    "DeviceResponse": {
      "description": "The device response.",
      "required": [
        "plantId",
        "deviceId",
        "_links",
        "product",
        "vendor",
        "serial",
        "name",
        "startUpUtc"
      ],
      "type": "object",
      "properties": {
        "plantId": {
          "description": "Gets or sets the plant id.",
          "type": "string"
        },
        "deviceId": {
          "description": "Gets or sets the device id.",
          "type": "string"
        },
        "productGroupTagId": {
          "format": "int32",
          "description": "Gets the tag id of the product group",
          "type": "integer"
        },
        "_links": {
          "description": "Gets or sets the HATEOAS links for the current object",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Link"
            }
          }
        },
        "product": {
          "description": "Gets or sets the product.",
          "type": "string"
        },
        "vendor": {
          "description": "Gets or sets the vendor.",
          "type": "string"
        },
        "serial": {
          "description": "Serial number of the device.",
          "type": "string"
        },
        "name": {
          "description": "Name of the device.",
          "type": "string"
        },
        "startUpUtc": {
          "format": "date-time",
          "description": "Start up utc date time.",
          "type": "string"
        },
        "termOfGuarantee": {
          "format": "date-time",
          "description": "Gets the term of guarantee",
          "type": "string"
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        }
      }
    },
    "DeviceRequest": {
      "description": "The device request.",
      "required": [
        "name",
        "startUpUtc"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the device.",
          "type": "string"
        },
        "startUpUtc": {
          "format": "date-time",
          "description": "Start up utc date time.",
          "type": "string"
        },
        "termOfGuarantee": {
          "format": "date-time",
          "description": "Gets the term of guarantee",
          "type": "string"
        }
      }
    },
    "WeatherForecastResponse": {
      "description": "The weather forecast response object.",
      "required": [
        "now",
        "tomorrow"
      ],
      "type": "object",
      "properties": {
        "now": {
          "$ref": "#/definitions/WeatherForecastLatestResponse",
          "description": "The response object for latest weather."
        },
        "tomorrow": {
          "$ref": "#/definitions/WeatherForecastDayResponse",
          "description": "The response object for tomorrow."
        }
      }
    },
    "WeatherForecastLatestResponse": {
      "description": "The weather forecast object for latest timestamp.",
      "required": [
        "time",
        "iconId",
        "temperature"
      ],
      "type": "object",
      "properties": {
        "time": {
          "format": "date-time",
          "description": "Utc timestamp of the returned weather.",
          "type": "string"
        },
        "iconId": {
          "format": "int32",
          "description": "Id of the weather icon. E.g. 2 = Cloudy, 61 = half rainy and half sunny. The corresponding night icon is 100 higher, e.g. 161 = half rainy and half clear sky.",
          "type": "integer"
        },
        "temperature": {
          "format": "double",
          "description": "Temperature in degree celsius (°C).",
          "type": "number"
        }
      }
    },
    "WeatherForecastDayResponse": {
      "description": "The weather forecast object for a whole day.",
      "required": [
        "date",
        "iconId",
        "minTemperature",
        "maxTemperature"
      ],
      "type": "object",
      "properties": {
        "date": {
          "format": "date-time",
          "description": "The date of the weather.",
          "type": "string"
        },
        "iconId": {
          "format": "int32",
          "description": "Id of the weather icon. E.g. 2 = Cloudy, 61 = half rainy and half sunny. The corresponding night icon is 100 higher, e.g. 161 = half rainy and half clear sky.",
          "type": "integer"
        },
        "minTemperature": {
          "format": "double",
          "description": "The minmum temperature of the day.",
          "type": "number"
        },
        "maxTemperature": {
          "format": "double",
          "description": "The maximum temperature of the day.",
          "type": "number"
        }
      }
    },
    "GridManagementWidgetResponse": {
      "type": "object",
      "properties": {
        "activePowerRestriction": {
          "format": "double",
          "description": "Gets or sets the active power restriction. This is the last value measured.",
          "type": "number"
        },
        "maximumPower": {
          "format": "double",
          "description": "Gets or sets the maximum power.",
          "type": "number"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Gets or sets the timestamp of the last change of the restriction in UTC.",
          "type": "string"
        },
        "restrictionSource": {
          "format": "int32",
          "description": "Gets or sets the restriction source for the last change as TagId.",
          "type": "integer"
        },
        "powerRestriction": {
          "description": "Gets or sets the array of power restrictions in percent for the last 24 hours.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MeasurementValueResult"
          }
        },
        "activePower": {
          "description": "Gets or sets the array of power values in W for the last 24 hours.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MeasurementValueResult"
          }
        }
      }
    },
    "MeasurementValueResult": {
      "description": "",
      "required": [
        "time",
        "value"
      ],
      "type": "object",
      "properties": {
        "time": {
          "format": "date-time",
          "description": "Time stamp of the measurement.",
          "type": "string"
        },
        "value": {
          "format": "double",
          "description": "Value of the measurement.",
          "type": "number"
        }
      }
    },
    "MeasurementQueryRequest": {
      "description": "Request object to query measurements.",
      "required": [
        "queryItems"
      ],
      "type": "object",
      "properties": {
        "dateTimeBegin": {
          "format": "date-time",
          "description": "Begin time stamp of the measurement query (utc).",
          "type": "string"
        },
        "dateTimeEnd": {
          "format": "date-time",
          "description": "End time stamp of the measurement query (utc).",
          "type": "string"
        },
        "queryItems": {
          "description": "List of query items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MeasurementQueryItemRequest"
          }
        }
      }
    },
    "MeasurementQueryItemRequest": {
      "description": "",
      "required": [
        "componentId"
      ],
      "type": "object",
      "properties": {
        "componentId": {
          "description": "Unique identifier of the component, e.g. plantId, deviceId, etc. Multiple components can be passed as comma-separated list.",
          "type": "string"
        },
        "channelId": {
          "description": "Referenced channel.",
          "type": "string"
        },
        "resolution": {
          "description": "Resolution of the interval (FiveMinutes, FifteenMinutes, OneHour, ThreeHours, SixHours, TwelveHours, OneDay, OneMonth, OneYear).",
          "type": "string"
        },
        "timezone": {
          "description": "Gets or sets the timezone (IANA time tone id).",
          "type": "string"
        },
        "aggregate": {
          "description": "Requested aggregation function (Sum, Avg, Min, Max, Last, Dif).",
          "type": "string"
        },
        "multiAggregate": {
          "description": "Gets or sets the aggregation function, if multiple components are requested (Sum, Avg, Min, Max, Last).",
          "type": "string"
        }
      }
    },
    "MeasurementResult": {
      "description": "The measurement result object.",
      "required": [
        "componentId",
        "values"
      ],
      "type": "object",
      "properties": {
        "componentId": {
          "description": "Unique identifier of the component.",
          "type": "string"
        },
        "channelId": {
          "description": "Referenced channel id.",
          "type": "string"
        },
        "values": {
          "description": "Values of the requested device and channel.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MeasurementValueResult"
          }
        }
      }
    },
    "LiveDataPollRequestItem": {
      "description": "The live data poll request.",
      "required": [
        "componentId"
      ],
      "type": "object",
      "properties": {
        "componentId": {
          "description": "Gets or sets the component id, can also be a csv list of component ids.",
          "type": "string"
        },
        "channelId": {
          "description": "Gets or sets the channel id.",
          "type": "string"
        },
        "multiAggregate": {
          "description": "Gets or sets the aggregation function, if multiple components are requested (Sum, Avg, Min, Max, Last).",
          "type": "string"
        }
      }
    },
    "MeterConfigurationResult": {
      "description": "The meter configuration result.",
      "required": [
        "gridFeedIn",
        "gridConsumption",
        "_links"
      ],
      "type": "object",
      "properties": {
        "gridFeedIn": {
          "$ref": "#/definitions/MeterConfigurationResultItem",
          "description": "Gets or sets the grid feed in."
        },
        "gridConsumption": {
          "$ref": "#/definitions/MeterConfigurationResultItem",
          "description": "Gets or sets the grid consumption."
        },
        "_links": {
          "description": "Gets or sets the HATEOAS links for the current object",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Link"
            }
          }
        }
      }
    },
    "MeterConfigurationResultItem": {
      "description": "The meter configuration result item.",
      "required": [
        "current",
        "available"
      ],
      "type": "object",
      "properties": {
        "current": {
          "description": "Gets or sets the current items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MeterConfigurationResultItemEntry"
          }
        },
        "available": {
          "description": "Gets or sets the available items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MeterConfigurationResultItemEntry"
          }
        }
      }
    },
    "MeterConfigurationResultItemEntry": {
      "description": "The meter configuration result item entry.",
      "required": [
        "componentId",
        "componentName"
      ],
      "type": "object",
      "properties": {
        "componentId": {
          "description": "Gets or sets the component id.",
          "type": "string"
        },
        "componentName": {
          "description": "Gets or sets the component name.",
          "type": "string"
        },
        "sourceFunction": {
          "format": "int64",
          "description": "Gets or sets the channel id.",
          "type": "integer"
        }
      }
    },
    "MeterConfigurationUpdate": {
      "description": "The meter configuration update.",
      "type": "object",
      "properties": {
        "gridFeedIn": {
          "$ref": "#/definitions/MeterConfigurationUpdatetItem",
          "description": "Gets or sets the grid feed in."
        },
        "gridConsumption": {
          "$ref": "#/definitions/MeterConfigurationUpdatetItem",
          "description": "Gets or sets the grid consumption."
        }
      }
    },
    "MeterConfigurationUpdatetItem": {
      "description": "The meter configuration updatet item.",
      "type": "object",
      "properties": {
        "channels": {
          "description": "Gets or sets the channels.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MeterConfigurationUpdatetItemEntry"
          }
        }
      }
    },
    "MeterConfigurationUpdatetItemEntry": {
      "description": "The meter configuration updatet item entry.",
      "required": [
        "componentId",
        "sourceFunction"
      ],
      "type": "object",
      "properties": {
        "componentId": {
          "description": "Gets or sets the component id.",
          "type": "string"
        },
        "sourceFunction": {
          "format": "int64",
          "description": "Gets or sets the channel id.",
          "type": "integer"
        }
      }
    },
    "MenuItemsResponse": {
      "description": "Response object for menu items.",
      "required": [
        "componentType"
      ],
      "type": "object",
      "properties": {
        "componentType": {
          "description": "Defines the component type of this navigation item (Portfolio, PlantGroup, Plant, SubPlant, Device).",
          "enum": [
            "Portfolio",
            "PlantGroup",
            "Plant",
            "Device",
            "SubPlant"
          ],
          "type": "string"
        },
        "name": {
          "description": "Name of the navigation item.",
          "type": "string"
        },
        "componentId": {
          "description": "Unique identifier of the component.",
          "type": "string"
        },
        "menuItems": {
          "description": "Menu items for current component.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MenuItem"
          }
        }
      }
    },
    "MenuItem": {
      "description": "The menu item for the vertical navigation.",
      "required": [
        "menuItemType"
      ],
      "type": "object",
      "properties": {
        "menuItemType": {
          "description": "Defined menu item type (Dashboard, Monitoring, Analyse, Configuration).",
          "enum": [
            "GroupDashboard",
            "GroupMonitoring",
            "GroupAnalyze",
            "GroupConfiguration",
            "ViewEnergyAndPower",
            "ViewCurrentMeasurementValues",
            "ViewCustomerMessages",
            "ViewParameters",
            "ViewPermissions",
            "ViewDeviceRegistration",
            "ViewSubPlantConfiguration",
            "ViewAnalyzeToolPro",
            "ViewDeviceProperties",
            "ViewCounterConfiguration",
            "ViewPlantRegistration",
            "ViewGridSystemService",
            "ViewPlantProperties",
            "ViewPlantGroups"
          ],
          "type": "string"
        },
        "subItems": {
          "description": "Sub menu items of the current menu item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MenuItem"
          }
        }
      }
    },
    "NavigationItem": {
      "description": "The navigation item to navigation between plants, devices, etc.",
      "required": [
        "componentType",
        "name",
        "componentId"
      ],
      "type": "object",
      "properties": {
        "componentType": {
          "description": "Defines the component type of this navigation item (Portfolio, PlantGroup, Plant, SubPlant, Device).",
          "enum": [
            "Portfolio",
            "PlantGroup",
            "Plant",
            "Device",
            "SubPlant"
          ],
          "type": "string"
        },
        "name": {
          "description": "Name of the navigation item.",
          "type": "string"
        },
        "componentId": {
          "description": "Unique identifier of the component.",
          "type": "string"
        }
      }
    },
    "NotificationConfigurationItemResponse": {
      "description": "",
      "required": [
        "configurationId",
        "createdByUserId",
        "contactslist",
        "status"
      ],
      "type": "object",
      "properties": {
        "configurationId": {
          "format": "int64",
          "description": "Gets or sets the identifier of the configuration.",
          "type": "integer"
        },
        "createdByUserId": {
          "format": "int64",
          "description": "Gets or sets the identifier of the user who created the configuration.",
          "type": "integer"
        },
        "componentId": {
          "format": "int64",
          "description": "Gets or sets the identifier of the component the configuration is for. NULL if portfolio.",
          "type": "integer"
        },
        "contactslist": {
          "description": "Gets or sets the address list (comma separated emailadresses).",
          "type": "string"
        },
        "status": {
          "description": "Gets or sets a value indicating whether the configuration is active or inactive.",
          "type": "boolean"
        },
        "eventTypes": {
          "description": "Gets or sets a list of types of the events (f.e. WARN/ERROR etc.).",
          "type": "string"
        },
        "notificationType": {
          "description": "Gets or sets the type of the notification (Alarm or Report).",
          "enum": [
            "Alarm",
            "Report"
          ],
          "type": "string"
        },
        "cycle": {
          "description": "Gets or sets the cycle suggestion. For alarms always Immediate.",
          "enum": [
            "Immediate",
            "Hourly",
            "Daily",
            "Weekly",
            "Monthly",
            "Annualy"
          ],
          "type": "string"
        },
        "customDescription": {
          "description": "Gets or sets short information describing the configuration.",
          "type": "string"
        },
        "componentName": {
          "description": "Gets or sets the name of the component.",
          "type": "string"
        },
        "designationTagId": {
          "format": "int32",
          "description": "Gets or sets the designation tagId for the short Designation of the Configuration.",
          "type": "integer"
        },
        "configurationTemplateId": {
          "format": "int32",
          "description": "Gets or sets the configuration template identifier the configuration is based on.",
          "type": "integer"
        },
        "componentType": {
          "description": "Gets or sets the Component Type used for the Notification level.",
          "enum": [
            "Portfolio",
            "PlantGroup",
            "Plant",
            "Device",
            "SubPlant"
          ],
          "type": "string"
        },
        "configuredParameters": {
          "description": "Gets or sets the configured custom parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationConfigurationParameterResponse"
          }
        }
      }
    },
    "NotificationConfigurationParameterResponse": {
      "description": "",
      "type": "object",
      "properties": {
        "parameterTemplateId": {
          "format": "int32",
          "description": "Gets or sets the parameter template identifier.",
          "type": "integer"
        },
        "value": {
          "description": "Gets or sets the value.",
          "type": "string"
        },
        "textTagId": {
          "format": "int32",
          "description": "Gets or sets the text tagid identifing the text to show for this parameter.",
          "type": "integer"
        }
      }
    },
    "NotificationConfigurationPostRequest": {
      "description": "",
      "required": [
        "contactslist"
      ],
      "type": "object",
      "properties": {
        "contactslist": {
          "description": "Gets or sets the address list. Comma-separated List of valid email-addresses.",
          "type": "string"
        },
        "status": {
          "description": "Gets or sets a value indicating whether the configuration is active or inactive.",
          "type": "boolean"
        },
        "eventTypes": {
          "description": "Gets or sets a list of types of the events. Comma-separated List of valid event types (trace level). This CAN be null or string.empty if\r\n            you want enable the notification for ALL event types.",
          "type": "string"
        },
        "cycle": {
          "description": "Gets or sets the cycle suggestion.",
          "enum": [
            "Immediate",
            "Hourly",
            "Daily",
            "Weekly",
            "Monthly",
            "Annualy"
          ],
          "type": "string"
        },
        "customDescription": {
          "description": "Gets or sets information describing the configuration.",
          "type": "string"
        },
        "configurationTemplateId": {
          "format": "int32",
          "description": "Gets or sets the configuration template identifier.",
          "type": "integer"
        },
        "configuredParameters": {
          "description": "Gets or sets the configured custom parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationConfigurationParameterRequest"
          }
        }
      }
    },
    "NotificationConfigurationParameterRequest": {
      "description": "",
      "type": "object",
      "properties": {
        "parameterTemplateId": {
          "format": "int32",
          "description": "Gets or sets the parameter template identifier.",
          "type": "integer"
        },
        "value": {
          "description": "Gets or sets the value.",
          "type": "string"
        }
      }
    },
    "NotificationConfigurationPutRequest": {
      "description": "A notification configuration put request.",
      "required": [
        "contactslist",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "contactslist": {
          "description": "Gets or sets the address list. Comma-separated List of valid email-addresses.",
          "type": "string"
        },
        "status": {
          "description": "Gets or sets a value indicating whether the configuration is active or inactive.",
          "type": "boolean"
        },
        "eventTypes": {
          "description": "Gets or sets a list of types of the events. Comma-separated List of valid event types (trace level). This CAN be null or string.empty if\r\n            you want enable the notification for ALL event types.",
          "type": "string"
        },
        "customDescription": {
          "description": "Gets or sets information describing the confiugration. this can be null or string.empty and is optional.",
          "type": "string"
        },
        "cycle": {
          "description": "Gets or sets the cycle suggestion.",
          "enum": [
            "Immediate",
            "Hourly",
            "Daily",
            "Weekly",
            "Monthly",
            "Annualy"
          ],
          "type": "string"
        },
        "parameters": {
          "description": "Gets or sets the custom parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationConfigurationParameterRequest"
          }
        }
      }
    },
    "NotificationConfigurationTemplateResponse": {
      "description": "A Template for a Notification.",
      "type": "object",
      "properties": {
        "configurationTemplateId": {
          "format": "int32",
          "description": "Gets or sets the configuration template identifier.",
          "type": "integer"
        },
        "notificationType": {
          "description": "Gets or sets the type of the notification (Alarm or Report).",
          "enum": [
            "Alarm",
            "Report"
          ],
          "type": "string"
        },
        "designationTagId": {
          "format": "int32",
          "description": "Gets or sets the designation tagid what to show the user as the short description/designation.",
          "type": "integer"
        },
        "descriptionTemplateTagId": {
          "format": "int32",
          "description": "Gets or sets the description template tagId to show user as example Text..",
          "type": "integer"
        },
        "cycleSuggestion": {
          "description": "Gets or sets the cycle suggestion.",
          "enum": [
            "Immediate",
            "Hourly",
            "Daily",
            "Weekly",
            "Monthly",
            "Annualy"
          ],
          "type": "string"
        },
        "parameters": {
          "description": "Gets or sets the custom parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigurationParameterTemplateResponse"
          }
        }
      }
    },
    "ConfigurationParameterTemplateResponse": {
      "description": "Configuration Option for a given Notification Template.",
      "type": "object",
      "properties": {
        "parameterTemplateId": {
          "format": "int32",
          "description": "Gets or sets the parameter template identifier.",
          "type": "integer"
        },
        "textTagId": {
          "format": "int32",
          "description": "Gets or sets the text tagId. This is shown for the user\r\nwith the field to set the Parameter.",
          "type": "integer"
        },
        "minValue": {
          "format": "int64",
          "description": "Gets or sets the minimum value.",
          "type": "integer"
        },
        "maxValue": {
          "format": "int64",
          "description": "Gets or sets the maximum value.",
          "type": "integer"
        }
      }
    },
    "OverviewPlantItems": {
      "type": "object",
      "properties": {
        "unassigned": {
          "description": "Exist unassigned device in this hierarchy level",
          "type": "boolean"
        },
        "items": {
          "description": "Overview items in this hierarchy level without devices",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OverviewPlantItem"
          }
        }
      }
    },
    "OverviewPlantItem": {
      "required": [
        "componentType",
        "name",
        "componentId"
      ],
      "type": "object",
      "properties": {
        "maxWOut": {
          "format": "double",
          "description": "Gets the peak power of the plant group, plant or sub plant.",
          "type": "number"
        },
        "perfRatioToday": {
          "format": "double",
          "description": "Todays Performance Ratio of the plant or sub plant.",
          "type": "number"
        },
        "perfRatioYesterday": {
          "format": "double",
          "description": "Yesterdays Performance Ratio of the plant or sub plant.",
          "type": "number"
        },
        "componentType": {
          "description": "Defines the component type of this navigation item ( PlantGroup, Plant, SubPlant, Device, SubPlantUnassigned ).",
          "enum": [
            "Portfolio",
            "PlantGroup",
            "Plant",
            "Device",
            "SubPlant"
          ],
          "type": "string"
        },
        "name": {
          "description": "Name of the navigation item (plant group name, plant name or sub plant name.",
          "type": "string"
        },
        "componentId": {
          "description": "Unique identifier of the component.",
          "type": "string"
        },
        "state": {
          "format": "int64",
          "description": "State of the plant group, plant or sub plant.",
          "type": "integer"
        },
        "totWhOutToday": {
          "format": "double",
          "description": "Gets todays energy of the  plant, sub plant or device.",
          "type": "number"
        },
        "totWhOutYesterday": {
          "format": "double",
          "description": "Gets yesterdays energy of the  plant, sub plant or device.",
          "type": "number"
        },
        "specWhOutToday": {
          "format": "double",
          "description": "Gets todays specific energy of the  plant, sub plant or device.",
          "type": "number"
        },
        "specWhOutYesterday": {
          "format": "double",
          "description": "Gets yesterdays specific energy of the  plant, sub plant or device.",
          "type": "number"
        }
      }
    },
    "OverviewItemDevice": {
      "required": [
        "componentType",
        "name",
        "componentId"
      ],
      "type": "object",
      "properties": {
        "serial": {
          "description": "Serial number of the device.",
          "type": "string"
        },
        "product": {
          "description": "Gets the tag id of the product group",
          "type": "string"
        },
        "componentType": {
          "description": "Defines the component type of this navigation item ( PlantGroup, Plant, SubPlant, Device, SubPlantUnassigned ).",
          "enum": [
            "Portfolio",
            "PlantGroup",
            "Plant",
            "Device",
            "SubPlant"
          ],
          "type": "string"
        },
        "name": {
          "description": "Name of the navigation item (plant group name, plant name or sub plant name.",
          "type": "string"
        },
        "componentId": {
          "description": "Unique identifier of the component.",
          "type": "string"
        },
        "state": {
          "format": "int64",
          "description": "State of the plant group, plant or sub plant.",
          "type": "integer"
        },
        "totWhOutToday": {
          "format": "double",
          "description": "Gets todays energy of the  plant, sub plant or device.",
          "type": "number"
        },
        "totWhOutYesterday": {
          "format": "double",
          "description": "Gets yesterdays energy of the  plant, sub plant or device.",
          "type": "number"
        },
        "specWhOutToday": {
          "format": "double",
          "description": "Gets todays specific energy of the  plant, sub plant or device.",
          "type": "number"
        },
        "specWhOutYesterday": {
          "format": "double",
          "description": "Gets yesterdays specific energy of the  plant, sub plant or device.",
          "type": "number"
        }
      }
    },
    "ParameterQueryRequest": {
      "description": "",
      "required": [
        "queryItems"
      ],
      "type": "object",
      "properties": {
        "queryItems": {
          "description": "List of query items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterQueryItemRequest"
          }
        }
      }
    },
    "ParameterQueryItemRequest": {
      "description": "",
      "required": [
        "componentId"
      ],
      "type": "object",
      "properties": {
        "channelId": {
          "description": "Referenced channel.",
          "type": "string"
        },
        "componentId": {
          "description": "Unique identifier of the component, e.g. plantId, deviceId, etc. Multiple components can be passed as comma-separated list.",
          "type": "string"
        }
      }
    },
    "ParameterResult": {
      "description": "",
      "required": [
        "componentId",
        "values"
      ],
      "type": "object",
      "properties": {
        "componentId": {
          "description": "Unique identifier of the component.",
          "type": "string"
        },
        "values": {
          "description": "Values of the requested device and channel.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterValueResult"
          }
        }
      }
    },
    "ParameterValueResult": {
      "description": "",
      "required": [
        "channelId",
        "timestamp",
        "value"
      ],
      "type": "object",
      "properties": {
        "channelId": {
          "description": "Unique identifier of the channel.",
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Timestamp of the parameter modification.",
          "type": "string"
        },
        "value": {
          "description": "Value of the parameter.",
          "type": "string"
        },
        "min": {
          "format": "double",
          "description": "Current minimum of the parameter.",
          "type": "number"
        },
        "max": {
          "format": "double",
          "description": "Current maximum of the parameter.",
          "type": "number"
        },
        "possibleValues": {
          "description": "Possible values of a enum.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "state": {
          "description": "Current state of the parameter (\"queued\", \"confirmed\"",
          "type": "string"
        }
      }
    },
    "ParameterDataRequest": {
      "description": "",
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "description": "List of parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterDataItem"
          }
        }
      }
    },
    "ParameterDataItem": {
      "description": "",
      "required": [
        "channelId",
        "timestamp",
        "value"
      ],
      "type": "object",
      "properties": {
        "channelId": {
          "description": "Identifier of the parameter",
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Timestamp of the last parameter modification or creation",
          "type": "string"
        },
        "value": {
          "description": "Parameter value.",
          "type": "string"
        }
      }
    },
    "PlantResponse": {
      "description": "",
      "required": [
        "plantId",
        "ownerId",
        "ownerIdentifier",
        "_links",
        "name",
        "countryName",
        "city",
        "zipCode",
        "peakPower",
        "dcPowerInputMax",
        "startUpUtc"
      ],
      "type": "object",
      "properties": {
        "plantId": {
          "description": "The plant id.",
          "type": "string"
        },
        "ownerId": {
          "format": "int64",
          "description": "The owner id.",
          "type": "integer"
        },
        "ownerIdentifier": {
          "description": "The owner identifier.",
          "type": "string"
        },
        "_links": {
          "description": "Gets or sets the HATEOAS links for the current object",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Link"
            }
          }
        },
        "name": {
          "description": "Name of the plant.",
          "type": "string"
        },
        "countryName": {
          "description": "Country code where the plant is located in format ISO 3166 ALPHA-2.",
          "type": "string"
        },
        "currencyCode3": {
          "description": "The ISO currency code according to ISO 4217.",
          "type": "string"
        },
        "city": {
          "description": "City where the plant is located.",
          "type": "string"
        },
        "zipCode": {
          "description": "Zip code of the city.",
          "type": "string"
        },
        "street": {
          "description": "Street where the plant is located.",
          "type": "string"
        },
        "streetNo": {
          "description": "Street number.",
          "type": "string"
        },
        "federalState": {
          "type": "string"
        },
        "description": {
          "description": "Additional description.",
          "type": "string"
        },
        "trackingH": {
          "description": "Tracking h.",
          "type": "boolean"
        },
        "trackingV": {
          "description": "Tracking v.",
          "type": "boolean"
        },
        "azimuth": {
          "format": "int32",
          "description": "Azimuth.",
          "type": "integer"
        },
        "collectorSlope": {
          "format": "int32",
          "description": "Grade.",
          "type": "integer"
        },
        "timezone": {
          "description": "Timezone.",
          "type": "string"
        },
        "longitude": {
          "format": "double",
          "description": "Longitude.",
          "type": "number"
        },
        "latitude": {
          "format": "double",
          "description": "Latitude.",
          "type": "number"
        },
        "elevation": {
          "format": "int32",
          "description": "Height nn (Elevation).",
          "type": "integer"
        },
        "peakPower": {
          "format": "double",
          "description": "Peak power of plant.",
          "type": "number"
        },
        "dcPowerInputMax": {
          "format": "double",
          "description": "Maximum power of generator.",
          "type": "number"
        },
        "startUpUtc": {
          "format": "date-time",
          "description": "Start up utc date time.",
          "type": "string"
        }
      }
    },
    "PlantRequest": {
      "description": "The plant request.",
      "required": [
        "name",
        "countryName",
        "city",
        "zipCode",
        "peakPower",
        "dcPowerInputMax",
        "startUpUtc"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the plant.",
          "type": "string"
        },
        "countryName": {
          "description": "Country code where the plant is located in format ISO 3166 ALPHA-2.",
          "type": "string"
        },
        "currencyCode3": {
          "description": "The ISO currency code according to ISO 4217.",
          "type": "string"
        },
        "city": {
          "description": "City where the plant is located.",
          "type": "string"
        },
        "zipCode": {
          "description": "Zip code of the city.",
          "type": "string"
        },
        "street": {
          "description": "Street where the plant is located.",
          "type": "string"
        },
        "streetNo": {
          "description": "Street number.",
          "type": "string"
        },
        "federalState": {
          "type": "string"
        },
        "description": {
          "description": "Additional description.",
          "type": "string"
        },
        "trackingH": {
          "description": "Tracking h.",
          "type": "boolean"
        },
        "trackingV": {
          "description": "Tracking v.",
          "type": "boolean"
        },
        "azimuth": {
          "format": "int32",
          "description": "Azimuth.",
          "type": "integer"
        },
        "collectorSlope": {
          "format": "int32",
          "description": "Grade.",
          "type": "integer"
        },
        "timezone": {
          "description": "Timezone.",
          "type": "string"
        },
        "longitude": {
          "format": "double",
          "description": "Longitude.",
          "type": "number"
        },
        "latitude": {
          "format": "double",
          "description": "Latitude.",
          "type": "number"
        },
        "elevation": {
          "format": "int32",
          "description": "Height nn (Elevation).",
          "type": "integer"
        },
        "peakPower": {
          "format": "double",
          "description": "Peak power of plant.",
          "type": "number"
        },
        "dcPowerInputMax": {
          "format": "double",
          "description": "Maximum power of generator.",
          "type": "number"
        },
        "startUpUtc": {
          "format": "date-time",
          "description": "Start up utc date time.",
          "type": "string"
        }
      }
    },
    "PlantGroupResponse": {
      "description": "The plant group response object.",
      "required": [
        "plantGroupId",
        "plantCount",
        "_links",
        "name"
      ],
      "type": "object",
      "properties": {
        "plantGroupId": {
          "description": "Gets the plant group identifier.",
          "type": "string"
        },
        "plantCount": {
          "format": "int32",
          "description": "Gets the plant count.",
          "type": "integer"
        },
        "memberCount": {
          "format": "int32",
          "description": "Gets the member count. Is null, when user do not have permission to read the members.",
          "type": "integer"
        },
        "_links": {
          "description": "Gets the HATEOAS links for the current object.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Link"
            }
          }
        },
        "name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "description": {
          "description": "Gets or sets the description.",
          "type": "string"
        }
      }
    },
    "PlantGroupRequest": {
      "description": "The plant group request object.",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "description": {
          "description": "Gets or sets the description.",
          "type": "string"
        }
      }
    },
    "PlantGroupMemberDataRequest": {
      "description": "The plant member data post request.",
      "required": [
        "userId",
        "roleId"
      ],
      "type": "object",
      "properties": {
        "userId": {
          "format": "int64",
          "description": "Unique user id.",
          "type": "integer"
        },
        "roleId": {
          "format": "int64",
          "description": "Role id, e.g (User = 1, Installer, etc).",
          "type": "integer"
        }
      }
    },
    "PlantGroupMemberDataResponse": {
      "description": "The plant member data response.",
      "required": [
        "memberId",
        "plantGroupId",
        "identifier",
        "userId",
        "roleId"
      ],
      "type": "object",
      "properties": {
        "memberId": {
          "format": "int64",
          "description": "Unique member id corresponding to the plant and the user.",
          "type": "integer"
        },
        "plantGroupId": {
          "description": "Unique plant group id.",
          "type": "string"
        },
        "identifier": {
          "description": "Gets or sets the identifier.",
          "type": "string"
        },
        "firstName": {
          "description": "Gets or sets the person's first name.",
          "type": "string"
        },
        "lastName": {
          "description": "Gets or sets the person's last name.",
          "type": "string"
        },
        "userId": {
          "format": "int64",
          "description": "Unique user id.",
          "type": "integer"
        },
        "roleId": {
          "format": "int64",
          "description": "Role id, e.g (User = 1, Installer, etc).",
          "type": "integer"
        }
      }
    },
    "PlantMemberDataRequest": {
      "description": "The plant member data post request.",
      "required": [
        "userId",
        "roleId"
      ],
      "type": "object",
      "properties": {
        "userId": {
          "format": "int64",
          "description": "Unique user id.",
          "type": "integer"
        },
        "roleId": {
          "format": "int64",
          "description": "Role id, e.g (User = 1, Installer, etc).",
          "type": "integer"
        }
      }
    },
    "PlantMemberDataResponse": {
      "description": "The plant member data response.",
      "required": [
        "memberId",
        "plantId",
        "identifier",
        "userId",
        "roleId"
      ],
      "type": "object",
      "properties": {
        "memberId": {
          "format": "int64",
          "description": "Unique member id corresponding to the plant and the user.",
          "type": "integer"
        },
        "plantId": {
          "description": "Unique plant id.",
          "type": "string"
        },
        "identifier": {
          "description": "Gets or sets the identifier.",
          "type": "string"
        },
        "firstName": {
          "description": "Gets or sets the person's first name.",
          "type": "string"
        },
        "lastName": {
          "description": "Gets or sets the person's last name.",
          "type": "string"
        },
        "userId": {
          "format": "int64",
          "description": "Unique user id.",
          "type": "integer"
        },
        "roleId": {
          "format": "int64",
          "description": "Role id, e.g (User = 1, Installer, etc).",
          "type": "integer"
        }
      }
    },
    "PreRegistrationRequest": {
      "type": "object",
      "properties": {
        "productIdentificationCode": {
          "description": "Gets or sets the Product Identification Code (PIC)",
          "type": "string"
        },
        "registrationIdentifier": {
          "description": "Gets or sets the Registration Identifier (RID)",
          "type": "string"
        }
      }
    },
    "PreregisteredDeviceResponse": {
      "description": "The device response.",
      "required": [
        "product",
        "vendor",
        "serial",
        "name",
        "startUpUtc"
      ],
      "type": "object",
      "properties": {
        "product": {
          "description": "Gets or sets the product.",
          "type": "string"
        },
        "vendor": {
          "description": "Gets or sets the vendor.",
          "type": "string"
        },
        "serial": {
          "description": "Serial number of the device.",
          "type": "string"
        },
        "name": {
          "description": "Name of the device.",
          "type": "string"
        },
        "startUpUtc": {
          "format": "date-time",
          "description": "Start up utc date time.",
          "type": "string"
        },
        "termOfGuarantee": {
          "format": "date-time",
          "description": "Gets the term of guarantee",
          "type": "string"
        }
      }
    },
    "RoleResponse": {
      "description": "Response for roles",
      "required": [
        "id",
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "Gets or sets the role id.",
          "type": "integer"
        },
        "name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "tagId": {
          "format": "int32",
          "description": "Gets or sets the tag id for the localized display name.",
          "type": "integer"
        }
      }
    },
    "SubPlantRequest": {
      "required": [
        "name",
        "startUpUtc"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the sub plant.",
          "type": "string"
        },
        "countryName": {
          "description": "CountryName where the plant is located in format ISO 3166 ALPHA-2.",
          "type": "string"
        },
        "city": {
          "description": "City where the plant is located.",
          "type": "string"
        },
        "zipCode": {
          "description": "Zip code of the city.",
          "type": "string"
        },
        "street": {
          "description": "Street where the plant is located.",
          "type": "string"
        },
        "streetNo": {
          "description": "Street number.",
          "type": "string"
        },
        "federalState": {
          "description": "The federal state",
          "type": "string"
        },
        "description": {
          "description": "Additional description.",
          "type": "string"
        },
        "trackingH": {
          "description": "Tracking h.",
          "type": "boolean"
        },
        "trackingV": {
          "description": "Tracking v.",
          "type": "boolean"
        },
        "azimuth": {
          "format": "int32",
          "description": "Azimuth.",
          "type": "integer"
        },
        "collectorSlope": {
          "format": "int32",
          "description": "Grade.",
          "type": "integer"
        },
        "timezone": {
          "description": "Timezone.",
          "type": "string"
        },
        "longitude": {
          "format": "double",
          "description": "Longitude.",
          "type": "number"
        },
        "latitude": {
          "format": "double",
          "description": "Latitude.",
          "type": "number"
        },
        "elevation": {
          "format": "int32",
          "description": "Height nn (Elevation).",
          "type": "integer"
        },
        "startUpUtc": {
          "format": "date-time",
          "description": "The Start up utc date time in UTC.",
          "type": "string"
        },
        "specificAnnualYield": {
          "format": "double",
          "description": "Gets or sets the specific annual yield.",
          "type": "number"
        }
      }
    },
    "SubPlantResponse": {
      "description": "The sub plant response.",
      "required": [
        "componentId",
        "parentId",
        "name",
        "startUpUtc"
      ],
      "type": "object",
      "properties": {
        "componentId": {
          "description": "The sub plant id (=component id).",
          "type": "string"
        },
        "parentId": {
          "description": "Unique parent id (e.g. plant id)",
          "type": "string"
        },
        "name": {
          "description": "Name of the sub plant.",
          "type": "string"
        },
        "countryName": {
          "description": "CountryName where the plant is located in format ISO 3166 ALPHA-2.",
          "type": "string"
        },
        "city": {
          "description": "City where the plant is located.",
          "type": "string"
        },
        "zipCode": {
          "description": "Zip code of the city.",
          "type": "string"
        },
        "street": {
          "description": "Street where the plant is located.",
          "type": "string"
        },
        "streetNo": {
          "description": "Street number.",
          "type": "string"
        },
        "federalState": {
          "description": "The federal state",
          "type": "string"
        },
        "description": {
          "description": "Additional description.",
          "type": "string"
        },
        "trackingH": {
          "description": "Tracking h.",
          "type": "boolean"
        },
        "trackingV": {
          "description": "Tracking v.",
          "type": "boolean"
        },
        "azimuth": {
          "format": "int32",
          "description": "Azimuth.",
          "type": "integer"
        },
        "collectorSlope": {
          "format": "int32",
          "description": "Grade.",
          "type": "integer"
        },
        "timezone": {
          "description": "Timezone.",
          "type": "string"
        },
        "longitude": {
          "format": "double",
          "description": "Longitude.",
          "type": "number"
        },
        "latitude": {
          "format": "double",
          "description": "Latitude.",
          "type": "number"
        },
        "elevation": {
          "format": "int32",
          "description": "Height nn (Elevation).",
          "type": "integer"
        },
        "startUpUtc": {
          "format": "date-time",
          "description": "The Start up utc date time in UTC.",
          "type": "string"
        },
        "specificAnnualYield": {
          "format": "double",
          "description": "Gets or sets the specific annual yield.",
          "type": "number"
        }
      }
    },
    "TermsOfUseDocResponse": {
      "description": "Document for a terms of use.",
      "required": [
        "id",
        "cultureName",
        "termsOfUseType"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "Gets or sets the unique id of the document.",
          "type": "integer"
        },
        "cultureName": {
          "description": "Gets or sets the culture name of the document.",
          "type": "string"
        },
        "termsOfUseType": {
          "description": "Gets or sets the type of the terms of use, e.g. DataPrivacy.",
          "enum": [
            "TermsOfUse",
            "DataPrivacy"
          ],
          "type": "string"
        }
      }
    },
    "TermsOfUseDocContentResponse": {
      "description": "Content of a terms of use document.",
      "required": [
        "id",
        "cultureName",
        "termsOfUseType"
      ],
      "type": "object",
      "properties": {
        "documentContent": {
          "description": "Content of the terms of use document in html format.",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "Gets or sets the unique id of the document.",
          "type": "integer"
        },
        "cultureName": {
          "description": "Gets or sets the culture name of the document.",
          "type": "string"
        },
        "termsOfUseType": {
          "description": "Gets or sets the type of the terms of use, e.g. DataPrivacy.",
          "enum": [
            "TermsOfUse",
            "DataPrivacy"
          ],
          "type": "string"
        }
      }
    },
    "ConfirmationResponse": {
      "description": "Response object for terms of use confirmation.",
      "required": [
        "confirmationId"
      ],
      "type": "object",
      "properties": {
        "confirmationId": {
          "format": "int64",
          "description": "Gets or sets the unique confirmation id.",
          "type": "integer"
        }
      }
    },
    "UserAccountResponse": {
      "description": "",
      "required": [
        "address",
        "activated",
        "identifier",
        "userId",
        "title",
        "firstName",
        "lastName",
        "cultureName"
      ],
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/UserAddressInfoResponse",
          "description": "Further address information."
        },
        "activated": {
          "description": "Activiation value indicating whether the user is activated or not.",
          "type": "boolean"
        },
        "identifier": {
          "description": "Unique identifier/email address of the user.",
          "type": "string"
        },
        "userId": {
          "format": "int64",
          "description": "Unique id of the user.",
          "type": "integer"
        },
        "title": {
          "description": "User's title, e.g. \"Dr.\".",
          "type": "string"
        },
        "firstName": {
          "description": "User's first name.",
          "type": "string"
        },
        "lastName": {
          "description": "User's last name.",
          "type": "string"
        },
        "companyId": {
          "format": "int64",
          "description": "Unique identifier of the company.",
          "type": "integer"
        },
        "company": {
          "description": "Name of the company.",
          "type": "string"
        },
        "cultureName": {
          "description": "Culture Name see ISO standards [(ISO 639-1)-(3166-2)], e.g. \"de-DE\".",
          "type": "string"
        }
      }
    },
    "UserAddressInfoResponse": {
      "description": "A user address information response.",
      "type": "object",
      "properties": {
        "country": {
          "description": "Country where the user lives in format ISO 3166 ALPHA-2.",
          "type": "string"
        },
        "zipCode": {
          "description": "Zip code of the city where the user lives.",
          "type": "string"
        },
        "city": {
          "description": "City where the user lives.",
          "type": "string"
        },
        "street": {
          "description": "Gets or sets the street.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "Phone number of the user.",
          "type": "string"
        }
      }
    },
    "UserUpdateRequest": {
      "description": "",
      "required": [
        "identifier",
        "firstName",
        "lastName"
      ],
      "type": "object",
      "properties": {
        "identifier": {
          "description": "Gets or sets the identifier.",
          "type": "string"
        },
        "firstName": {
          "description": "Gets or sets the person's first name.",
          "type": "string"
        },
        "lastName": {
          "description": "Gets or sets the person's last name.",
          "type": "string"
        },
        "password": {
          "description": "Gets or sets the password.",
          "type": "string"
        },
        "cultureName": {
          "description": "Gets or sets the name of the culture.",
          "type": "string"
        },
        "title": {
          "description": "Gets or sets the title.",
          "type": "string"
        },
        "country": {
          "description": "Gets or sets the country in format ISO 3166 ALPHA-2.",
          "type": "string"
        },
        "zipCode": {
          "description": "Gets or sets the zip code.",
          "type": "string"
        },
        "city": {
          "description": "Gets or sets the city.",
          "type": "string"
        },
        "street": {
          "description": "Gets or sets the street.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "Gets or sets the phone number.",
          "type": "string"
        }
      }
    },
    "UserInfoResponse": {
      "description": "",
      "required": [
        "identifier",
        "userId",
        "title",
        "firstName",
        "lastName",
        "cultureName"
      ],
      "type": "object",
      "properties": {
        "identifier": {
          "description": "Unique identifier/email address of the user.",
          "type": "string"
        },
        "userId": {
          "format": "int64",
          "description": "Unique id of the user.",
          "type": "integer"
        },
        "title": {
          "description": "User's title, e.g. \"Dr.\".",
          "type": "string"
        },
        "firstName": {
          "description": "User's first name.",
          "type": "string"
        },
        "lastName": {
          "description": "User's last name.",
          "type": "string"
        },
        "companyId": {
          "format": "int64",
          "description": "Unique identifier of the company.",
          "type": "integer"
        },
        "company": {
          "description": "Name of the company.",
          "type": "string"
        },
        "cultureName": {
          "description": "Culture Name see ISO standards [(ISO 639-1)-(3166-2)], e.g. \"de-DE\".",
          "type": "string"
        }
      }
    },
    "UserCreationRequest": {
      "description": "",
      "required": [
        "identifier",
        "firstName",
        "lastName",
        "password",
        "cultureName",
        "title",
        "termsOfUseConfirmed",
        "dataPrivacyConfirmed",
        "noRobotValidationKey"
      ],
      "type": "object",
      "properties": {
        "identifier": {
          "description": "Unique identifier/email address of the user.",
          "type": "string"
        },
        "firstName": {
          "description": "User's first name.",
          "type": "string"
        },
        "lastName": {
          "description": "User's last name.",
          "type": "string"
        },
        "password": {
          "description": "User's password (not hashed).",
          "type": "string"
        },
        "cultureName": {
          "description": "Culture Name see ISO standards  [(ISO 639-1)-(3166-2)], e.g. \"de-DE\".",
          "type": "string"
        },
        "title": {
          "description": "User's title, e.g. \"Dr.\".",
          "type": "string"
        },
        "termsOfUseConfirmed": {
          "description": "Defines if user has confirmed terms of use.",
          "type": "boolean"
        },
        "dataPrivacyConfirmed": {
          "description": "Defines if user has confirmed the data privacy.",
          "type": "boolean"
        },
        "country": {
          "description": "Country where the user lives in format ISO 3166 ALPHA-2.",
          "type": "string"
        },
        "zipCode": {
          "description": "Zip code of the city.",
          "type": "string"
        },
        "city": {
          "description": "City where the user lives.",
          "type": "string"
        },
        "street": {
          "description": "Street where the user lives.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "Phone number of the user.",
          "type": "string"
        },
        "noRobotValidationKey": {
          "description": "Key to validate Google reCaptcha response",
          "type": "string"
        }
      }
    },
    "UserPasswordResetRequest": {
      "description": "Request to send reset token to email",
      "required": [
        "email",
        "noRobotValidationKey"
      ],
      "type": "object",
      "properties": {
        "email": {
          "description": "Gets or sets the email.",
          "type": "string"
        },
        "noRobotValidationKey": {
          "description": "Key to validate Google reCaptcha response",
          "type": "string"
        }
      }
    },
    "UserPasswordResetConfirmRequest": {
      "description": "Request to reset password with token and new password",
      "required": [
        "userId",
        "token",
        "password"
      ],
      "type": "object",
      "properties": {
        "userId": {
          "format": "int64",
          "description": "Gets or sets the user identifier.",
          "type": "integer"
        },
        "token": {
          "description": "Gets or sets the token that is send via email.",
          "type": "string"
        },
        "password": {
          "description": "Gets or sets the password.",
          "type": "string"
        }
      }
    },
    "DeviceInfo": {
      "required": [
        "id",
        "state"
      ],
      "description": "Device information",
      "type": "object",
      "properties": {
        "id": {
          "description": "Device identifier (e.g. \"SD2P:xxxx-xxxxxxxx\")",
          "type": "string"
        },
        "name": {
          "description": "Human readable device name (Nameplate.Location)",
          "type": "string"
        },
        "serial": {
          "description": "Serial number",
          "type": "string"
        },
        "state": {
          "description": "Access info state",
          "enum": [
            "Ok",
            "AccessDenied"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of the device (Nameplate.MainModel, e.g. SolarInverter)",
          "type": "string"
        },
        "model": {
          "description": "The model of the device (Nameplate.Model, e.g. STP 17000-TL20)",
          "type": "string"
        }
      }
    },
    "DeviceInfoList": {
      "description": "The device info list.",
      "type": "object",
      "properties": {
        "deviceInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceInfo"
          }
        }
      }
    },
    "DeviceConnectionDescriptor": {
      "required": [
        "deviceId"
      ],
      "description": "Device connection descriptor",
      "type": "object",
      "properties": {
        "deviceId": {
          "description": "device id",
          "type": "string"
        }
      }
    },
    "DeviceConnectionDescriptorList": {
      "description": "The device connection descriptor list.",
      "type": "object",
      "properties": {
        "deviceInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceConnectionDescriptor"
          }
        }
      }
    },
    "Protocol": {
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "description": "protocol id",
          "type": "string"
        },
        "name": {
          "description": "protocol name (e.g. Speedwire, Modbus, ...)",
          "type": "string"
        }
      }
    },
    "ProtocolList": {
      "description": "The protocol list.",
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Protocol"
          }
        }
      }
    },
    "ProtocolParameters": {
      "required": [
        "defaultCredentials"
      ],
      "description": "Protocol parameters",
      "type": "object",
      "properties": {
        "defaultCredentials": {
          "description": "Default credentials",
          "type": "string"
        }
      }
    },
    "DeviceManagementApi_DeviceParameters": {
      "properties": {
        "name": {
          "description": "Device name",
          "type": "string"
        }
      }
    },
    "Mapping_MappingType": {
      "type": "string",
      "description": "Mapping type",
      "enum": [
        "MappingType_Map"
      ]
    },
    "Mapping_MappingValueEntry": {
      "type": "object",
      "required": [
        "source",
        "destination"
      ],
      "properties": {
        "source": {
          "type": "string",
          "description": "Source value"
        },
        "destination": {
          "type": "array",
          "description": "Destination values",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Mapping_Mapping": {
      "type": "object",
      "description": "Mapping",
      "required": [
        "id",
        "type",
        "sourceId",
        "destinationIds",
        "values"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Mapping id"
        },
        "type": {
          "$ref": "#/definitions/Mapping_MappingType"
        },
        "sourceId": {
          "type": "string"
        },
        "destinationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Mapping_MappingValueEntry"
          }
        }
      }
    },
    "GridManagement_ControlMode": {
      "enum": [
        "OpenLoop",
        "ClosedLoop"
      ],
      "type": "string"
    },
    "GridManagement_Type": {
      "type": "object",
      "required": [
        "id",
        "enabled"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "GridManagement_SelectionMode": {
      "enum": [
        "SingleSelection",
        "MutipleSelection"
      ],
      "type": "string"
    },
    "GridManagement_SourceProperties": {
      "type": "object",
      "required": [
        "faultTolerance",
        "fallback",
        "mappingId"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "faultTolerance": {
          "type": "number",
          "description": "Fault tolerance in seconds"
        },
        "fallback": {
          "type": "object",
          "required": [
            "enabled",
            "delay",
            "values"
          ],
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "delay": {
              "type": "number",
              "description": "Fallback delay in ms"
            },
            "values": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "tag",
                  "value"
                ],
                "properties": {
                  "tag": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "mappingId": {
          "type": "string"
        }
      }
    },
    "GridManagement_RampingSettings": {
      "type": "object",
      "required": [
        "enabled",
        "interval",
        "maxGrowth",
        "maxReduction"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "interval": {
          "type": "number",
          "description": "Interval of changed values"
        },
        "maxGrowth": {
          "type": "number",
          "description": "maximal value growth"
        },
        "maxReduction": {
          "type": "number",
          "description": "maximal value reduction"
        }
      }
    },
    "GridManagement_PlantSettings": {
      "type": "object",
      "required": [
        "interval"
      ],
      "properties": {
        "interval": {
          "type": "number",
          "description": "Plant refresh interval"
        }
      }
    }
  }
}
